# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/common-3.7.3/charts/library/common/values.schema.json
app-template:
  defaultPodOptions:
    automountServiceAccountToken: false

  configMaps:
    config:
      data:
        config.toml: |
          # Socket address to listen on
          listen = "[::]:8080"

          # Allowed `Host` headers
          #
          # This _must_ be configured for production use. If unconfigured or the
          # list is empty, all `Host` headers are allowed.
          allowed-hosts = []

          # The canonical API endpoint of this server
          #
          # This is the endpoint exposed to clients in `cache-config` responses.
          #
          # This _must_ be configured for production use. If not configured, the
          # API endpoint is synthesized from the client's `Host` header which may
          # be insecure.
          #
          # The API endpoint _must_ end with a slash (e.g., `https://domain.tld/attic/`
          # not `https://domain.tld/attic`).
          api-endpoint = "https://attic.terence.cloud/"

          # Whether to soft-delete caches
          #
          # If this is enabled, caches are soft-deleted instead of actually
          # removed from the database. Note that soft-deleted caches cannot
          # have their names reused as long as the original database records
          # are there.
          #soft-delete-caches = false

          # Whether to require fully uploading a NAR if it exists in the global cache.
          #
          # If set to false, simply knowing the NAR hash is enough for
          # an uploader to gain access to an existing NAR in the global
          # cache.
          #require-proof-of-possession = true

          # Database connection
          [database]
          # Connection URL
          #
          # For production use it's recommended to use PostgreSQL.
          url = "postgresql://attic:N6Heq3bYDaTeiGAadkSVCRwkDfUXHtzdWTDEcS60AbLk44DqK6BvWStjMydW1N23@attic-cnpg-cluster-rw.attic:5432/attic"

          # Whether to enable sending on periodic heartbeat queries
          #
          # If enabled, a heartbeat query will be sent every minute
          #heartbeat = false

          # File storage configuration
          [storage]
          # Storage type
          #
          # Can be "local" or "s3".
          type = "local"

          # ## Local storage

          # The directory to store all files under
          path = "/attic"

          # ## S3 Storage (set type to "s3" and uncomment below)

          # The AWS region
          #region = "us-east-1"

          # The name of the bucket
          #bucket = "some-bucket"

          # Custom S3 endpoint
          #
          # Set this if you are using an S3-compatible object storage (e.g., Minio).
          #endpoint = "https://xxx.r2.cloudflarestorage.com"

          # Credentials
          #
          # If unset, the credentials are read from the `AWS_ACCESS_KEY_ID` and
          # `AWS_SECRET_ACCESS_KEY` environment variables.
          #[storage.credentials]
          #  access_key_id = ""
          #  secret_access_key = ""

          # Data chunking
          #
          # Warning: If you change any of the values here, it will be
          # difficult to reuse existing chunks for newly-uploaded NARs
          # since the cutpoints will be different. As a result, the
          # deduplication ratio will suffer for a while after the change.
          [chunking]
          # The minimum NAR size to trigger chunking
          #
          # If 0, chunking is disabled entirely for newly-uploaded NARs.
          # If 1, all NARs are chunked.
          nar-size-threshold = 65536 # chunk files that are 64 KiB or larger

          # The preferred minimum size of a chunk, in bytes
          min-size = 16384            # 16 KiB

          # The preferred average size of a chunk, in bytes
          avg-size = 65536            # 64 KiB

          # The preferred maximum size of a chunk, in bytes
          max-size = 262144           # 256 KiB

          # Compression
          [compression]
          # Compression type
          #
          # Can be "none", "brotli", "zstd", or "xz"
          type = "zstd"

          # Compression level
          #level = 8

          # Garbage collection
          [garbage-collection]
          # The frequency to run garbage collection at
          #
          # By default it's 12 hours. You can use natural language
          # to specify the interval, like "1 day".
          #
          # If zero, automatic garbage collection is disabled, but
          # it can still be run manually with `atticd --mode garbage-collector-once`.
          interval = "1 week"

          # Default retention period
          #
          # Zero (default) means time-based garbage-collection is
          # disabled by default. You can enable it on a per-cache basis.
          #default-retention-period = "6 months"

          [jwt]
          # WARNING: Changing _anything_ in this section will break any existing
          # tokens. If you need to regenerate them, ensure that you use the the
          # correct secret and include the `iss` and `aud` claims.

          # JWT `iss` claim
          #
          # Set this to the JWT issuer that you want to validate.
          # If this is set, all received JWTs will validate that the `iss` claim
          # matches this value.
          #token-bound-issuer = "some-issuer"

          # JWT `aud` claim
          #
          # Set this to the JWT audience(s) that you want to validate.
          # If this is set, all received JWTs will validate that the `aud` claim
          # contains at least one of these values.
          #token-bound-audiences = ["some-audience1", "some-audience2"]

          [jwt.signing]
          # JWT RS256 secret key
          #
          # Set this to the base64-encoded private half of an RSA PEM PKCS1 key.
          # You can also set it via the `ATTIC_SERVER_TOKEN_RS256_SECRET_BASE64`
          # environment variable.
          token-rs256-secret-base64 = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKSndJQkFBS0NBZ0VBemw3dENocmxVQTVYb2tqQ1hnYmM3MklYQThIYjR5OHhna2hxUFV2UldyOW1LVVByCitKTjY1Z0NSL0dLSVVDbzZWLzNDYkRyeEZHclNDSHVkbTEyYUxFQzYwYklFN2RQRFMwdzZxRmRyRHlQVW1EZnYKNTJPRXBaNHhaNnB3YVgzaCtLK01YM3h5dEhiWmNQNm1Gbm9seHVnSlhQYXRtWmplVlo1SEc4OFNZS0lhSEFzMwo2OGRRYmhFcko0OEFTNzJPbVM5Y3QyQTRQMWdieGlSWS9aczhpbHlKbytwZDFPRlFIVEZjRjY1TDc1SDY1U2hSClZ0TjJqT0hIdGNCZFBOc0t1QmpLY283c1RhRGVYY2sreVN1NkRYVVV6RXpsbmhiRTU4Y0hnYlVZVUQ1VVh2Q0YKN0hJVW9ieVFHckRmY2hRcnpFM3gyeGxVOXgyQ3V5Tjh4dkpOY0c5U3BaZTdkcVhUY1ExM0t5a2prNE4xZXowVgpoUGNXdENRNHdya1hlTG5SQ2ZtUlRIRkU5QXhWdGp1eGhXdmc5Um5IdFhpcEkrcEQwQWFkeWRLN2VrRVl4WUVqCnVBdStVRmJTTzVRSklvYWZzWFNsekFnYjkzYTNaQmpGUmNBOURjVjUxUlRTUjhpb0EyRzQra2dnVm5qUnBvKzgKbTlwb2FJcXp1Y3BRb3hwNjVwRnBJNklhckZyVlVRNk14OUR4SENJK2JGNFRkdHpQOVpSMXExSUdIYUZQbjE5WApaaERQd0NVNUptZ3VFUGpnVTlHeTF0OUtFN1BoRG52cjlDNUZnMi95Z204N3cyY0FON1Q0M3A0ZndtZXRDRlBnCnN3N255ZHE3QWdOYWM2YTdpZ0lSSWNHa0hTNHZjRXcxS2RPenIwVVhyZ1AvK0JXRlF1M1lOYTlSNGc4Q0F3RUEKQVFLQ0FnQXpXUTRzdGYxNW1sLzJxcGptRVZvV20vYnpBZURHMmI2OVZteE12UmtsdGJyaktKbkZtMWg0Y3dyZgoyOXBqNitYaGIrdll4eCtsLzJBc0tTblJkd3c5MTR0RVVzR0VOVzBCeHNGUGtwUzZTeVdDREdUK1UxWTFhVE9NCndpMC9La20zK1dINWZqc0NLUkk0V2J3VW1xYmNvMjUwK1pHL1JuaUhvQjY4VGgwWit5dDQ3OWVsckUyWVhXQTUKOHd4VlRDQjNmLy9YUnJNb0c3R3BidkRQaFRrZWlpRGJMcHpUTTQ2ZC9PS1hwOUFRRjJmd2JjUXpVT0ZOODMyZgovUEdXQzBCVEJ5UVVOZmlZNWg1K0FtMURXOFJxeGNkN2YrU2dIYlUzb0Y5L1NBSjVNTkVJWUZ0S05pWnBDY1JuClI3d0pJL2l6Mkc4Rm4zdHpFeDRzbHd0Y2F2eVdPMFpYTkUvQ3dTYkdDc3VRRWlabDlYY2dGbjlvTGVjZGl1S3oKZjBoamlscXpTcUhNWlBEYVJnMXNaQ3JIMTFwYjMxcktCckRzWnkycXR1YlVLbm9lcVh3Z3Rzemp2MHkwd1RacQpMMnpYT2dFRjJrOGw5a0ZtaWkxYXRlb0ZPKythSHJxOUlOZFIzb0t0LzRhUDc0RjFuWU02b2xqa2FTakhNM094CnpleENRWGNJSkpsZVV2Vks5NUtFVlVTUWJwVjJsV0FZTTlGMHV1N3dWaUg3M3pSTzIrQ1E2QTRpK2RlRis1amoKQUFmdkhPV1p4WVQ0dEJDZXBhTm1ybi9KWmYxTzVPR3BxaldCM3RFWGh1a3FpWU1HS25OZlVCS1p5UG1uS1JFdQoyUjJ1QVZIdktEVE9hQmdTRTFEYW5NTGJSOXJoV05GSEdqUEdCOVUzZXpVSW5KS1FPUUtDQVFFQTdMNEhhL01aCm5vbU9RZHVWMEExakVLSG8zS0NzaGlWTWtWOGxwcUx6bTZHeE5GWXNiem1oUmRTeldFdy9LcmJ4bzhUMXE1QkUKT1dxQk5DQVZGOS9CQXJySDdORklDU0lMb1l0VDRrc0hBcEI2SWQ0YzNFU20zM0dBUzhuSXlsQ3BVSmlrZXAwZgpRZWlGNmVicW10SFRKemh1TlhjYTJhaTJYKzM5Tk5DSHh0Q3QxdnVRenQzdDUwbmVoQnNOY3F5bmxybWpPajRFCjNaSXIvSnhVcFI0aC9VTjBCYWZQN0lzUDNQWUt6ZWcvdTFQTE1aVUEzRXR6ekk0bXBlMkpoSkhZVFliMGlIVkgKeHQ5TUVCM3hjSU0wTXd5cnVtT1BDNkUva0M3MVUzUGdLK2V3b3FxRmljU3VCbS9nbWdtYnVvVG5MaTdDQThyYgpudENMaDFzTWEzNHRpUUtDQVFFQTN5aHZRRnRxMWx5R2w2NUloellxdkhSazZPZ1pURDNJUi9QeGJLbzIyRzNwCjg3VUxpazFWMnB5U2ZPeC8rSVUvQ1V4MWlUN3BZQ3RVa3k3ZS90RGZqRlUrTU5tUmRGb3dlUmxhOGZHL2NTOWMKMHR6SG9kakRLYk9oSXk3eXJxYTk0OW9pb1BlTkZUSEoxM3VwTlBNd1B4MTE1bjh6MXhxQ3NsNWFYaGpEZUdHSQpSanJSckFqTjJyeDRTRUg5dzBrem40eFQ5a21vaDdoZzl0MGRPcGJWSHFqeUQ5UDZGV0NvMnNrUGE5bmQ4WnU0ClYyclVXdGUxN3ZmNGNIK2pqWHl0QWUzN3FESURoV1N5VjNSdFJBRnRwVXltTE0zZ1dRaWl5VlF6WlpSM2tRYjUKWDViOFdLMC90TDZVeStMUjJtSVhhaTFCRVV4Tm5jMFJvZzg4NFNlRTF3S0NBUUJLM2FsUkxQWjhHVG9BZjZWMwp2dFFHTFgyTFQ5QmZONnBvQ25QSXA1MXNLUXoxNVE1Mk9mNVRLL2x2UWVWejU1aXcxcGR1SXRoQVkvcnA5ZjlWCnBtL09JaTBaS2ZHaTJiNWQzc2F2T0ZUR0xkUkJvNUR5NDA3Mk9GbC9IaGUrU3hYUUpBVlh0UnB1YUU3NDhncGMKM1YvdDlqMTc4T2R2ejVlazdJajNTNzYwVThlMXhhWThsUmduM1VkZDlZUWlNSkZxNjllL2tsOU5obTBjbkg5MApHL3hac0J3ZnNicmlMZlBkUjMyUk1oSDlkbms2ZThsaTRRV0V1YXRsSzZJaVoxREU2NW1uRVplYVA0RTVVNDdICnF1WTJBcHJIL2JYOTBvZGNYRTArajlWamJRaUIySFVVWlRzM1UrZnVMbjJ0MVZ1YVVqVU9wL2NkMlF0V3lhYzYKMHhNcEFvSUJBRlEvaWJDOFVwdFhGeUVRbFNVbTEvK0oyY2JzU1JDMWluVlByV2VlNDFIV1BTcmF3TjZYejcvVwp1SjhkRWpzYTR1OTV4QzNxYUdUOE50UFNNREgzWFU0M3FHRDg0cU1Rb1pnMmNGVkROVWxmM2lWbFlLRERtdnFWCmJGSkNHVERDbHBIOCtuSFd3NWFxMDA3Y3lzYkl3UUF5K1IzcURBSTdhZmc1RXRqUGRJeHdGZWlkc0NiSXRCN08KWklLekYwQ3cxQ0o1OGdEYlVocmJDeEJuN2U3K25yc1NnVUJrZ05ldFJGSkU4ZU4vdndER0QxUkJhcVpaSmNCdwpNWVVYU3dIUmZlZHFsMFdxakJYQ0xHcEQ5RFJtYmFTb1NWeEU1VnYzbksxeGNtMzVIU0xOaFR3SFhvR0Q5cmNmCjlFRDlBc2oxbTIxa1pGcEpla3dHN1k5SFBXNnJZc1VDZ2dFQVNKMTBmSlBtbDloaE9oWHd2UEJrdXh1WTJPdW4KNTJld3VpcHFzNlgzOTdiYmEwaS9YdmJOUnBrL1l4OCtzenBZQWx2S1dHTXQ1dHByTUFBZEZBdXcxaTVrcHpDYwp2QWxtUWVIU0ZMaU85blRpMzlzSVJuZ3ZyK2k1Q3FYbVZXeUEyalF2TjhVMFJoSm1ZQ00xMGlOdnpyQWw0S010CmxtSnpFbCs0enovenI3RzhpcE16SHNGNWJGTloybG5hOWYrTFoxVWY4QXpGWkhZcThUYkNjVTNZWERQSVNhcHIKS1gwR1hqdmRHWTB2bzhOR0ZlSFd3OFBXWmNaVStEWi9SRTB6K2xaYTBTNjF5QkNEcHdQSGc3cysxTmltem9nLwpUc1FBeDhYd2xJVHdZaGpPTXVvYnNkL09oVjlkcWIyYzBHQkJncUZVYnNHN0FLZDRyZWtNWG9vZU1nPT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"

          # JWT HS256 secret key
          #
          # Set this to the base64-encoded HMAC secret key.
          # You can also set it via the `ATTIC_SERVER_TOKEN_HS256_SECRET_BASE64`
          # environment variable.
          #token-hs256-secret-base64 = ""

  controllers:
    main:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        main:
          image:
            repository: ghcr.io/zhaofengli/attic
            tag: latest@sha256:f98dc2e569c8b60839249c7526e138195e297837abf016102c8cf6d2e823c0b8
          args:
            - -f
            - /config.toml
          env:
            TZ: Europe/Paris
          ports:
            - name: http
              containerPort: 8080
          probes:
            liveness:
              enabled: true
              type: HTTP
            readiness:
              enabled: true
              type: HTTP

  service:
    main:
      controller: main
      type: ClusterIP
      ports:
        http:
          port: 8080

  ingress:
    main:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
        nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0,::/0"
      className: "nginx"
      hosts:
        - host: &host attic.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: main
                port: http
      tls:
        - secretName: attic-tls
          hosts:
            - *host

  persistence:
    data:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 10Gi
      globalMounts:
        - path: /attic
    config:
      type: secret
      name: attic-config
      advancedMounts:
        main:
          main:
            - path: /config.toml
              subPath: config.toml

cnpg-cluster:
  type: postgresql
  mode: standalone
  version:
    postgresql: "17"
  cluster:
    instances: 1
    imageCatalogRef:
      kind: ClusterImageCatalog
      name: postgresql
    storage:
      size: 2Gi
    primaryUpdateMethod: switchover
    primaryUpdateStrategy: unsupervised
    logLevel: "info"
    monitoring:
      enabled: true
      podMonitor:
        enabled: true
    postgresql: {}
    initdb:
      database: attic
