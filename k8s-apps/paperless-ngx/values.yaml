# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/library/common/values.schema.json
app-template:
  configMaps:
    config:
      data:
        PAPERLESS_TIME_ZONE: Europe/Paris
        PAPERLESS_PORT: "{{ .Values.service.main.ports.http.port }}"
        PAPERLESS_URL: "https://{{ (first .Values.ingress.main.hosts).host }}"
        PAPERLESS_DBENGINE: postgresql
        PAPERLESS_ENABLE_HTTP_REMOTE_USER: "true"
        PAPERLESS_OCR_LANGUAGE: fra+eng
        PAPERLESS_TASK_WORKERS: "2"
        PAPERLESS_THREADS_PER_WORKER: "4"
        PAPERLESS_REDIS: redis://{{ .Release.Name }}-valkey
        PAPERLESS_LOGOUT_REDIRECT_URL: "https://{{ (first .Values.ingress.main.hosts).host }}/oauth2/sign_out"
        # Paperless keeps the original file
        PAPERLESS_OCR_USER_ARGS: '{"invalidate_digital_signatures": true}'
  controllers:
    main:
      type: deployment
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        main:
          image:
            repository: ghcr.io/paperless-ngx/paperless-ngx
            tag: 2.19.2@sha256:e1e0026cdacda4bb157c024a8a1a343bd16b34d8900e7f3958598b9afebd0d38
          ports:
            - name: http
              containerPort: 8000
          envFrom:
            - configMapRef:
                identifier: config
          env:
            PAPERLESS_APPS: allauth.socialaccount.providers.openid_connect
            PAPERLESS_SOCIALACCOUNT_PROVIDERS:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-socialaccount-providers"
                  key: socialaccount-providers
            PAPERLESS_DBHOST:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-app"
                  key: host
            PAPERLESS_DBNAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-app"
                  key: dbname
            PAPERLESS_DBUSER:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-app"
                  key: user
            PAPERLESS_DBPASS:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-app"
                  key: password
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /
        backup:
          image:
            repository: ghcr.io/paperless-ngx/paperless-ngx
            tag: 2.19.2@sha256:e1e0026cdacda4bb157c024a8a1a343bd16b34d8900e7f3958598b9afebd0d38
          envFrom:
            - configMapRef:
                identifier: config
          command:
            - /bin/sh
            - -c
            - |
              while true; do
                echo "Starting backup"
                python3 /usr/src/paperless/src/manage.py document_exporter /usr/src/paperless/export -d -f -p -sm -z
                sleep 86400
              done
          env:
            PAPERLESS_DBHOST:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-pg17-app"
                  key: host
            PAPERLESS_DBNAME:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-pg17-app"
                  key: dbname
            PAPERLESS_DBUSER:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-pg17-app"
                  key: user
            PAPERLESS_DBPASS:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-app"
                  key: password

  service:
    main:
      controller: main
      ports:
        http:
          port: 8000

  ingress:
    main:
      enabled: true
      className: "nginx"
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
        nginx.ingress.kubernetes.io/proxy-body-size: 100m
        nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0"
        nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
        nginx.ingress.kubernetes.io/auth-tls-secret: "paperless-ngx/client-auth-ca"
        nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
        nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
      hosts:
        - host: paperless.terence.cloud
          paths:
            - path: /
              pathType: ImplementationSpecific
              service:
                identifier: main
                port: http
      tls:
        - secretName: paperless-tls
          hosts:
            - paperless.terence.cloud

  persistence:
    data:
      enabled: true
      retain: true
      globalMounts:
        - path: /usr/src/paperless/data
      accessMode: ReadWriteOnce
      size: 1Gi
    media:
      enabled: true
      retain: true
      globalMounts:
        - path: /usr/src/paperless/media
      accessMode: ReadWriteOnce
      size: 8Gi
    export:
      enabled: true
      retain: true
      globalMounts:
        - path: /usr/src/paperless/export
      accessMode: ReadWriteOnce
      size: 10Gi
    consume:
      enabled: true
      retain: true
      globalMounts:
        - path: /usr/src/paperless/consume
      accessMode: ReadWriteOnce
      size: 4Gi

valkey:
  deploymentStrategy: Recreate
  dataStorage:
    enabled: true
    requestedSize: "1Gi"
    labels:
      velero.io/exclude-from-backup: "true"

cnpg-cluster:
  type: postgresql
  mode: recovery
  version:
    postgresql: "18"
  cluster:
    instances: 1
    imageCatalogRef:
      kind: ClusterImageCatalog
      name: postgresql
    storage:
      size: 10Gi
    resources: {}
    primaryUpdateMethod: switchover
    primaryUpdateStrategy: unsupervised
    logLevel: "info"
    monitoring:
      enabled: true
      podMonitor:
        enabled: true
    postgresql: {}
    initdb:
      database: paperless-ngx
  recovery:
    method: import
    import:
      type: microservice
      databases: ["paperless-ngx"]
      schemaOnly: false
      source:
        host: paperless-ngx-cnpg-cluster-pg17-rw
        username: paperless-ngx
        database: paperless-ngx
        passwordSecret:
          name: paperless-ngx-cnpg-cluster-pg17-app
          key: password
        sslKeySecret:
          name: paperless-ngx-cnpg-cluster-pg17-replication
          key: tls.key
        sslCertSecret:
          name: paperless-ngx-cnpg-cluster-pg17-replication
          key: tls.crt
        sslRootCertSecret:
          name: paperless-ngx-cnpg-cluster-pg17-ca
          key: ca.crt
