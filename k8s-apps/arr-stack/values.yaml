# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/common-3.7.3/charts/library/common/values.schema.json
app-template:
  defaultPodOptions:
    automountServiceAccountToken: false
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: "OnRootMismatch"

  controllers:
    jellyfin:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        jellyfin:
          image:
            repository: lscr.io/linuxserver/jellyfin
            tag: 10.10.7ubu2404-ls71@sha256:500c6c81ca870895d1d26597ebda92f3aa9909318a54335803940408b815bb2f
          env:
            TZ: Europe/Paris
            PUID: 0
            PGID: 0
          ports:
            - name: http
              containerPort: 8096
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /health
            readiness:
              enabled: true
              custom: true
              spec:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - grep -q '<IsStartupWizardCompleted>true</IsStartupWizardCompleted>' /config/system.xml && exit 0 || exit 1
          securityContext:
            privileged: true

    jellyseerr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        jellyseerr:
          image:
            repository: fallenbagel/jellyseerr
            tag: 2.7.2@sha256:98296861cf3caebe8ada72e5dbe2729fb10cdb2042d2b82e86065bf870418587
          env:
            TZ: Europe/Paris
          ports:
            - name: http
              containerPort: 5055
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /api/v1/status
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /api/v1/status
          securityContext:
            privileged: true

    jellystat:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        securityContext:
          runAsUser: 0
          runAsGroup: 0
      containers:
        jellystat:
          image:
            repository: cyfershepard/jellystat
            tag: 1.1.6@sha256:683358900cff8d299fa93add731b2976d7c9bc49f9593f40f5351498fd488767
          ports:
            - name: http
              containerPort: 3000
          env:
            TZ: Europe/Paris
            MINIMUM_SECONDS_TO_INCLUDE_PLAYBACK: "120"
            POSTGRES_IP:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-jellystat-app"
                  key: host
            POSTGRES_USER:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-jellystat-app"
                  key: user
            POSTGRES_PORT:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-jellystat-app"
                  key: port
            POSTGRES_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-jellystat-app"
                  key: password
            POSTGRES_DB:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-jellystat-app"
                  key: dbname
            JWT_SECRET:
              valueFrom:
                secretKeyRef:
                  name: "jellystat-jwt-secret"
                  key: password
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /auth/isconfigured
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /auth/isconfigured
    sonarr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        sonarr:
          image:
            repository: lscr.io/linuxserver/sonarr
            tag: 4.0.15.2941-ls288@sha256:b0ac15772c04f329964ed79cb446ab23fd1ee28f33b58b10f0264feac17d33cd
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 8989
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping

    radarr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        radarr:
          image:
            repository: lscr.io/linuxserver/radarr
            tag: 5.26.2.10099-ls279@sha256:ae89f05ad7023258730ed62f5fcca63aab1e27ee5adcca1edb55d716f7cef356
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 7878
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping

    lidarr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        lidarr:
          image:
            repository: blampe/lidarr
            tag: latest@sha256:e0183648fe90dca3ad2ebbad16e6d7b8e1a20ed73c4682f34ed23e85ee6df792
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 8686
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping

    prowlarr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        prowlarr:
          image:
            repository: lscr.io/linuxserver/prowlarr
            tag: 1.37.0.5076-ls122@sha256:89eac63d2099477094df8c2329a6a750b8b5e382f8975dd18e7861678b55cca4
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 9696
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping

    bazarr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        bazarr:
          image:
            repository: lscr.io/linuxserver/bazarr
            tag: v1.5.2-ls310@sha256:a848b8a1d9e3b2553157ceb72cd3fc6ae2b34e71bcece24561b0944fb7922b46
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 6767
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /system/ping
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /system/ping

    configarr:
      type: cronjob
      annotations:
        reloader.stakater.com/auto: "true"
      cronjob:
        schedule: "0 0 * * *"
        successfulJobsHistory: 1
        failedJobsHistory: 1
      containers:
        configarr:
          image:
            repository: configarr/configarr
            tag: 1.13.7@sha256:00fa3ff7d1f764a564e9afe949a8b3f1ca2d82e44059fdd54a8fd95819894342
          env:
            TZ: Europe/Paris

    flaresolverr:
      type: deployment
      strategy: RollingUpdate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        securityContext:
          runAsUser: 0
          runAsGroup: 0
      containers:
        flaresolverr:
          image:
            repository: ghcr.io/flaresolverr/flaresolverr
            tag: v3.3.25@sha256:68160ec125e5cde23bc45549a443da0da0223cf4f0de7571ed2c6851cf6e1561
          env:
            TZ: Europe/Paris
          ports:
            - name: http
              containerPort: 8191
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /health
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /health

    qbittorrent:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        qbittorrent:
          image:
            repository: lscr.io/linuxserver/qbittorrent
            tag: 5.1.2-r0-ls403@sha256:a3fe8465b4fa5e711358338ee90a958424033ec1e5030dda98d565efc25e0816
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
            TORRENTING_PORT: 6887
          ports:
            - name: http
              containerPort: 8080
          probes:
            liveness:
              enabled: true
              type: HTTP
            readiness:
              enabled: true
              type: HTTP

        gluetun:
          dependsOn: qbittorrent
          image:
            repository: ghcr.io/qdm12/gluetun
            tag: v3.40.0@sha256:2b42bfa046757145a5155acece417b65b4443c8033fb88661a8e9dcf7fda5a00
          env:
            TZ: Europe/Paris
            VPN_SERVICE_PROVIDER: airvpn
            VPN_TYPE: wireguard
            VPN_INTERFACE: wg0
            SERVER_REGIONS: Europe
            WIREGUARD_ADDRESSES: 10.145.193.219/32,fd7d:76ee:e68f:a993:7c10:4d59:a5d7:9537/128
            FIREWALL_VPN_INPUT_PORTS: "6887"
          envFrom:
            - secretRef:
                name: gluetun-wg-keys
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
            runAsUser: 0
            runAsGroup: 0
            privileged: true

    filebrowser-quantum:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        filebrowser-quantum:
          image:
            repository: ghcr.io/gtsteffaniak/filebrowser
            tag: 0.7.16-beta@sha256:f5f672b4962f436543f7b0cef4b7b836ad126b7d31476282ccd1655c7f6f4b6d
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 8080
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /health
            readiness:
              enabled: true
              spec:
                httpGet:
                  port: http
                  path: /health

    slskd:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        slskd:
          image:
            repository: slskd/slskd
            tag: 0.23.1@sha256:57f87d80b882b882f72cecc0b3aa0f0adb4c7887ed278906c237ff30003ae639
          env:
            TZ: Europe/Paris
            PUID: "1000"
            PGID: "1000"
            SLSKD_CONFIG: /config/slskd.yml
          ports:
            - name: http
              containerPort: 5030
            - name: slskd
              containerPort: 39332
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /health
            readiness:
              enabled: true
              spec:
                httpGet:
                  port: http
                  path: /health

        gluetun:
          dependsOn: slskd
          image:
            repository: ghcr.io/qdm12/gluetun
            tag: v3.40.0@sha256:2b42bfa046757145a5155acece417b65b4443c8033fb88661a8e9dcf7fda5a00
          env:
            TZ: Europe/Paris
            VPN_SERVICE_PROVIDER: airvpn
            VPN_TYPE: wireguard
            VPN_INTERFACE: wg2
            SERVER_REGIONS: Europe
            WIREGUARD_ADDRESSES: 10.165.132.142/32,fd7d:76ee:e68f:a993:98e4:695c:3789:4b9d/128
            FIREWALL_VPN_INPUT_PORTS: "39332"
          envFrom:
            - secretRef:
                name: gluetun-slskd-wg-keys
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
            runAsUser: 0
            runAsGroup: 0
            privileged: true

    soularr:
      type: cronjob
      cronjob:
        schedule: "*/5 * * * *"
        successfulJobsHistory: 1
        failedJobsHistory: 1
        concurrencyPolicy: Forbid
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        soularr:
          image:
            repository: mrusse08/soularr
            tag: latest@sha256:da225f2b1042865c7223b3ee3e6d53e496eecc24566f60e48ef239396f54898a
          env:
            TZ: Europe/Paris
          command: python
          args: ["-u", "/app/soularr.py"]

    huntarr:
      enabled: false
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        securityContext:
          runAsUser: 0
          runAsGroup: 0
      containers:
        huntarr:
          image:
            repository: huntarr/huntarr
            tag: 8.1.15@sha256:a705e690e20bfd6f52081c126a3dc8d6e987374c9feda8c146a56ddac42dca47
          env:
            TZ: Europe/Paris
          ports:
            - name: http
              containerPort: 9705
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping
            readiness:
              enabled: true
              spec:
                httpGet:
                  port: http
                  path: /ping

  service:
    jellyfin:
      controller: jellyfin
      type: ClusterIP
      ports:
        http:
          port: 8096
    jellyseerr:
      controller: jellyseerr
      type: ClusterIP
      ports:
        http:
          port: 5055
    jellystat:
      controller: jellystat
      type: ClusterIP
      ports:
        http:
          port: 3000
    sonarr:
      controller: sonarr
      type: ClusterIP
      ports:
        http:
          port: 8989
    radarr:
      controller: radarr
      type: ClusterIP
      ports:
        http:
          port: 7878
    lidarr:
      controller: lidarr
      type: ClusterIP
      ports:
        http:
          port: 8686
    prowlarr:
      controller: prowlarr
      type: ClusterIP
      ports:
        http:
          port: 9696
    bazarr:
      controller: bazarr
      type: ClusterIP
      ports:
        http:
          port: 6767
    flaresolverr:
      controller: flaresolverr
      type: ClusterIP
      ports:
        http:
          port: 8191
    qbittorrent:
      controller: qbittorrent
      type: ClusterIP
      ports:
        http:
          port: 8080
    filebrowser-quantum:
      controller: filebrowser-quantum
      type: ClusterIP
      ports:
        http:
          port: 8080
    slskd:
      controller: slskd
      type: ClusterIP
      ports:
        http:
          port: 5030
    huntarr:
      enabled: false
      controller: huntarr
      type: ClusterIP
      ports:
        http:
          port: 9705

  ingress:
    jellyfin:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
        nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0,::/0"
      className: "nginx"
      hosts:
        - host: &host jf.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: jellyfin
                port: http
      tls:
        - secretName: jellyfin-tls
          hosts:
            - *host

    jellyseerr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host js.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: jellyseerr
                port: http
      tls:
        - secretName: jellyseerr-tls
          hosts:
            - *host

    jellystat:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host jstat.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: jellystat
                port: http
      tls:
        - secretName: jellystat-tls
          hosts:
            - *host

    sonarr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host son.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: sonarr
                port: http
      tls:
        - secretName: sonarr-tls
          hosts:
            - *host

    radarr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host rad.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: radarr
                port: http
      tls:
        - secretName: radarr-tls
          hosts:
            - *host

    lidarr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host lid.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: lidarr
                port: http
      tls:
        - secretName: lidarr-tls
          hosts:
            - *host

    prowlarr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host prow.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: prowlarr
                port: http
      tls:
        - secretName: prowlarr-tls
          hosts:
            - *host

    bazarr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host baz.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: bazarr
                port: http
      tls:
        - secretName: bazarr-tls
          hosts:
            - *host

    qbittorrent:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host qb.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: qbittorrent
                port: http
      tls:
        - secretName: qbittorrent-tls
          hosts:
            - *host

    filebrowser-quantum:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
        nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
        nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
        nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-User
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
      className: "nginx"
      hosts:
        - host: &host fbq.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: filebrowser-quantum
                port: http
      tls:
        - secretName: filebrowser-quantum-tls
          hosts:
            - *host

    slskd:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host slskd.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: slskd
                port: http
      tls:
        - secretName: slskd-tls
          hosts:
            - *host

    huntarr:
      enabled: false
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host hunt.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: huntarr
                port: http
      tls:
        - secretName: huntarr-tls
          hosts:
            - *host

  persistence:
    data:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1200Gi
      advancedMounts:
        jellyfin:
          jellyfin:
            - path: /data/media
              subPath: media
        sonarr:
          sonarr:
            - path: /data
        radarr:
          radarr:
            - path: /data
        lidarr:
          lidarr:
            - path: /data
        bazarr:
          bazarr:
            - path: /data
        qbittorrent:
          qbittorrent:
            - path: /data/download
              subPath: download
        filebrowser-quantum:
          filebrowser-quantum:
            - path: /data
        slskd:
          slskd:
            - path: /music
              subPath: media/music
            - path: /download
              subPath: download/slskd
        soularr:
          soularr:
            - path: /data
              subPath: media/music
            - path: /downloads
              subPath: download/slskd/complete

    jellyfin-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 30Gi
      advancedMounts:
        jellyfin:
          jellyfin:
            - path: /config

    jellyfin-hwa:
      enabled: true
      type: hostPath
      hostPath: /dev/dri/renderD128
      hostPathType: "CharDevice"
      advancedMounts:
        jellyfin:
          jellyfin:
            - path: /dev/dri/renderD128

    jellyseerr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        jellyseerr:
          jellyseerr:
            - path: /app/config

    jellystat-backup-data:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        jellystat:
          jellystat:
            - path: /app/backend/backup-data

    sonarr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        sonarr:
          sonarr:
            - path: /config

    radarr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        radarr:
          radarr:
            - path: /config

    lidarr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 2Gi
      advancedMounts:
        lidarr:
          lidarr:
            - path: /config

    qbittorrent-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        qbittorrent:
          qbittorrent:
            - path: /config

    gluetun-device:
      enabled: true
      type: hostPath
      hostPath: /dev/net/tun
      hostPathType: "CharDevice"
      advancedMounts:
        qbittorrent:
          gluetun:
            - path: /dev/net/tun

    prowlarr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 3Gi
      advancedMounts:
        prowlarr:
          prowlarr:
            - path: /config

    bazarr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 100Mi
      advancedMounts:
        bazarr:
          bazarr:
            - path: /config

    configarr-cache:
      enabled: true
      type: emptyDir
      advancedMounts:
        configarr:
          configarr:
            - path: /app/repos
              subPath: configarr-repos

    configarr-config:
      type: configMap
      identifier: configarr-config
      advancedMounts:
        configarr:
          configarr:
            - path: /app/config/config.yml
              subPath: config.yml

    configarr-secrets:
      enabled: true
      type: secret
      name: configarr-secrets
      items:
        - key: secrets.yml
          path: secrets.yml
      advancedMounts:
        configarr:
          configarr:
            - path: /app/config/secrets.yml
              subPath: secrets.yml

    filebrowser-quantum-db:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 100Mi
      advancedMounts:
        filebrowser-quantum:
          filebrowser-quantum:
            - path: /home/filebrowser/database

    filebrowser-quantum-config:
      type: configMap
      identifier: filebrowser-quantum-config
      advancedMounts:
        filebrowser-quantum:
          filebrowser-quantum:
            - path: /home/filebrowser/config.yaml
              subPath: config.yaml

    slskd-config:
      type: secret
      name: slskd-config
      advancedMounts:
        slskd:
          slskd:
            - path: /config
              readOnly: true

    slskd-data:
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 500Mi
      advancedMounts:
        slskd:
          slskd:
            - path: /app

    gluetun-slskd-device:
      enabled: true
      type: hostPath
      hostPath: /dev/net/tun
      hostPathType: "CharDevice"
      advancedMounts:
        slskd:
          gluetun:
            - path: /dev/net/tun

    soularr-config:
      type: secret
      name: soularr-config
      advancedMounts:
        soularr:
          soularr:
            - path: /data/config.ini
              subPath: config.ini

    # huntarr-config:
    #   type: persistentVolumeClaim
    #   accessMode: ReadWriteOnce
    #   size: 1Gi
    #   advancedMounts:
    #     huntarr:
    #       huntarr:
    #         - path: /config

  configMaps:
    configarr-config:
      data:
        config.yml: |
          trashGuideUrl: https://github.com/TRaSH-Guides/Guides
          recyclarrConfigUrl: https://github.com/recyclarr/config-templates

          sonarr:
            series:
              base_url: http://arr-stack-sonarr:8989
              api_key: !secret SONARR_API_KEY

              quality_definition:
                type: series

              include:
                - template: sonarr-quality-definition-series
                - template: sonarr-v4-quality-profile-web-1080p
                - template: sonarr-v4-custom-formats-web-1080p
                - template: sonarr-v4-quality-profile-bluray-web-1080p-french-vostfr
                - template: sonarr-v4-custom-formats-bluray-web-1080p-french-vostfr

              custom_formats: []

          radarr:
            movies:
              base_url: http://arr-stack-radarr:7878
              api_key: !secret RADARR_API_KEY

              include:
                - template: radarr-quality-definition-movie
                - template: radarr-quality-profile-hd-bluray-web
                - template: radarr-custom-formats-hd-bluray-web
                - template: radarr-quality-profile-remux-web-1080p
                - template: radarr-custom-formats-remux-web-1080p
                - template: radarr-quality-profile-hd-bluray-web-french-vostfr
                - template: radarr-custom-formats-hd-bluray-web-french-vostfr
                - template: radarr-quality-profile-hd-remux-web-french-vostfr
                - template: radarr-custom-formats-hd-remux-web-french-vostfr

              custom_formats: []

    filebrowser-quantum-config:
      data:
        config.yaml: |
          server:
            port: 8080
            database: "database/database.db"
            sources:
              - path: /data
          auth:
            methods:
              noauth: false
              password:
                enabled: false
              proxy:
                enabled: true
                header: "x-auth-request-user"
                createUser: true
          userDefaults:
            permissions:
              api: true
              admin: true
              modify: true
              share: true
              realtime: true

cnpg-cluster-jellystat:
  type: postgresql
  mode: standalone
  version:
    postgresql: "17"
  cluster:
    instances: 1
    imageCatalogRef:
      kind: ClusterImageCatalog
      name: postgresql
    storage:
      size: 5Gi
    roles:
      - name: jellystat
        connectionLimit: -1
        ensure: present
        createdb: true
        inherit: true
        login: true
    resources: {}
    primaryUpdateMethod: switchover
    primaryUpdateStrategy: unsupervised
    logLevel: "info"
    monitoring:
      enabled: true
      podMonitor:
        enabled: true
    postgresql: {}
    initdb:
      database: jellystat
