# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/common-3.7.3/charts/library/common/values.schema.json
app-template:
  defaultPodOptions:
    automountServiceAccountToken: false
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: "OnRootMismatch"

  controllers:
    jellyfin:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        annotations:
          backup.velero.io/backup-volumes-excludes: data
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        jellyfin:
          image:
            repository: lscr.io/linuxserver/jellyfin
            tag: 10.10.7ubu2404-ls77@sha256:9bc128a2a6f58f65da0dabc77d56e4a3f8c25ec6f491bb7d43efe95236321a6b
          env:
            TZ: Europe/Paris
            PUID: 0
            PGID: 0
          ports:
            - name: http
              containerPort: 8096
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /health
            readiness:
              enabled: true
              custom: true
              spec:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - grep -q '<IsStartupWizardCompleted>true</IsStartupWizardCompleted>' /config/system.xml && exit 0 || exit 1
          securityContext:
            privileged: true

    jellyseerr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        jellyseerr:
          image:
            repository: fallenbagel/jellyseerr
            tag: 2.7.3@sha256:4538137bc5af902dece165f2bf73776d9cf4eafb6dd714670724af8f3eb77764
          env:
            TZ: Europe/Paris
          ports:
            - name: http
              containerPort: 5055
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /api/v1/status
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /api/v1/status
          securityContext:
            privileged: true

    jellystat:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        securityContext:
          runAsUser: 0
          runAsGroup: 0
      containers:
        jellystat:
          image:
            repository: cyfershepard/jellystat
            tag: 1.1.6@sha256:683358900cff8d299fa93add731b2976d7c9bc49f9593f40f5351498fd488767
          ports:
            - name: http
              containerPort: 3000
          env:
            TZ: Europe/Paris
            MINIMUM_SECONDS_TO_INCLUDE_PLAYBACK: "120"
            POSTGRES_IP:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-jellystat-app"
                  key: host
            POSTGRES_USER:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-jellystat-app"
                  key: user
            POSTGRES_PORT:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-jellystat-app"
                  key: port
            POSTGRES_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-jellystat-app"
                  key: password
            POSTGRES_DB:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-cnpg-cluster-jellystat-app"
                  key: dbname
            JWT_SECRET:
              valueFrom:
                secretKeyRef:
                  name: "jellystat-jwt-secret"
                  key: password
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /auth/isconfigured
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /auth/isconfigured
    sonarr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        annotations:
          backup.velero.io/backup-volumes-excludes: data
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        sonarr:
          image:
            repository: lscr.io/linuxserver/sonarr
            tag: 4.0.15.2941-ls292@sha256:bb50bac26881613af15deb4df891e4a7cb09e3333aec20a0522cb188fb22b11d
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 8989
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping

    radarr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        annotations:
          backup.velero.io/backup-volumes-excludes: data
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        radarr:
          image:
            repository: lscr.io/linuxserver/radarr
            tag: 5.27.5.10198-ls283@sha256:19474a623b278f558c9696a19b84640ad4aff3b2959f08904a77ffbad73ed7bd
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 7878
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping

    lidarr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        annotations:
          backup.velero.io/backup-volumes-excludes: data
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        lidarr:
          image:
            repository: blampe/lidarr
            tag: latest@sha256:c433fbacc38019f6921325786cd632dbe77de4db1789932e65615dce503ab215
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 8686
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping

    prowlarr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        prowlarr:
          image:
            repository: lscr.io/linuxserver/prowlarr
            tag: 2.0.5.5160-ls126@sha256:856c93bab72a6a41a23ff60bab48554135c044a456f40909307011dea8ddeafb
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 9696
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping

    bazarr:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        annotations:
          backup.velero.io/backup-volumes-excludes: data
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        bazarr:
          image:
            repository: lscr.io/linuxserver/bazarr
            tag: v1.5.3-ls318@sha256:59f4d72d433a837f4bb22c8cbb58e26ec63716da2ec4c23d2dd8fef55a804a85
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 6767
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /system/ping
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /system/ping

    configarr:
      type: cronjob
      annotations:
        reloader.stakater.com/auto: "true"
      cronjob:
        schedule: "0 0 * * *"
        successfulJobsHistory: 1
        failedJobsHistory: 1
      containers:
        configarr:
          image:
            repository: configarr/configarr
            tag: 1.15.1@sha256:256393d6797db45060d0683dc711e3656656191f5f31824c3bf998c1a46fb653
          env:
            TZ: Europe/Paris

    flaresolverr:
      type: deployment
      strategy: RollingUpdate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        securityContext:
          runAsUser: 0
          runAsGroup: 0
      containers:
        flaresolverr:
          image:
            repository: ghcr.io/flaresolverr/flaresolverr
            tag: v3.4.1@sha256:5379a9209c86870558d77c8cdf7efdf300aecf0447617a05dc77e0491d53f34c
          env:
            TZ: Europe/Paris
          ports:
            - name: http
              containerPort: 8191
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /health
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /health

    qbittorrent:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        annotations:
          backup.velero.io/backup-volumes-excludes: data
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      initContainers:
        gluetun:
          image:
            repository: ghcr.io/qdm12/gluetun
            tag: v3.40.0@sha256:2b42bfa046757145a5155acece417b65b4443c8033fb88661a8e9dcf7fda5a00
          env:
            TZ: Europe/Paris
            VPN_SERVICE_PROVIDER: airvpn
            VPN_TYPE: wireguard
            VPN_INTERFACE: wg0
            SERVER_REGIONS: Europe
            WIREGUARD_ADDRESSES: 10.145.193.219/32,fd7d:76ee:e68f:a993:7c10:4d59:a5d7:9537/128
            FIREWALL_VPN_INPUT_PORTS: "6887"
            DNS_ADDRESS: 1.1.1.1
          restartPolicy: Always
          envFrom:
            - secretRef:
                name: gluetun-wg-keys
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
            runAsUser: 0
            runAsGroup: 0
            privileged: true
      containers:
        qbittorrent:
          image:
            repository: lscr.io/linuxserver/qbittorrent
            tag: 5.1.2-r0-ls403@sha256:a3fe8465b4fa5e711358338ee90a958424033ec1e5030dda98d565efc25e0816
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
            TORRENTING_PORT: 6887
          ports:
            - name: http
              containerPort: 8080
          probes:
            liveness:
              enabled: true
              type: HTTP
            readiness:
              enabled: true
              type: HTTP

    filebrowser-quantum:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        annotations:
          backup.velero.io/backup-volumes-excludes: data
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        filebrowser-quantum:
          image:
            repository: ghcr.io/gtsteffaniak/filebrowser
            tag: 0.8.6-beta@sha256:2d3bf4bd4365c6f64e7b4280b1c457c0f7d6f7b96489ff29021cf5e8301268a6
          env:
            TZ: Europe/Paris
            PUID: 1000
            PGID: 1000
          ports:
            - name: http
              containerPort: 8080
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /health
            readiness:
              enabled: true
              spec:
                httpGet:
                  port: http
                  path: /health

    slskd:
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        annotations:
          backup.velero.io/backup-volumes-excludes: data
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "{{ .Release.Name }}"
                topologyKey: kubernetes.io/hostname
      containers:
        slskd:
          image:
            repository: slskd/slskd
            tag: 0.23.2@sha256:28df5325f301537ea8669b2ef90112a30cc9f2efd3eb714c9a778460b5dc6288
          env:
            TZ: Europe/Paris
            PUID: "1000"
            PGID: "1000"
            SLSKD_CONFIG: /config/slskd.yml
          ports:
            - name: http
              containerPort: 5030
            - name: slskd
              containerPort: 39332
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /health
            readiness:
              enabled: true
              spec:
                httpGet:
                  port: http
                  path: /health

        gluetun:
          dependsOn: slskd
          image:
            repository: ghcr.io/qdm12/gluetun
            tag: v3.40.0@sha256:2b42bfa046757145a5155acece417b65b4443c8033fb88661a8e9dcf7fda5a00
          env:
            TZ: Europe/Paris
            VPN_SERVICE_PROVIDER: airvpn
            VPN_TYPE: wireguard
            VPN_INTERFACE: wg2
            SERVER_REGIONS: Europe
            WIREGUARD_ADDRESSES: 10.165.132.142/32,fd7d:76ee:e68f:a993:98e4:695c:3789:4b9d/128
            FIREWALL_VPN_INPUT_PORTS: "39332"
          envFrom:
            - secretRef:
                name: gluetun-slskd-wg-keys
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
            runAsUser: 0
            runAsGroup: 0
            privileged: true

    soularr:
      type: cronjob
      pod:
        annotations:
          backup.velero.io/backup-volumes-excludes: data
      cronjob:
        schedule: "*/5 * * * *"
        successfulJobsHistory: 1
        failedJobsHistory: 1
        concurrencyPolicy: Forbid
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        soularr:
          image:
            repository: mrusse08/soularr
            tag: latest@sha256:894210817cd89dd410fa603be2744ca81c593b9eaa542639a7894f2df008a788
          env:
            TZ: Europe/Paris
          command: python
          args: ["-u", "/app/soularr.py"]

    huntarr:
      enabled: false
      type: deployment
      strategy: Recreate
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        securityContext:
          runAsUser: 0
          runAsGroup: 0
      containers:
        huntarr:
          image:
            repository: huntarr/huntarr
            tag: 8.2.10@sha256:b5a47c2b43806165f433d308d69a21e74a687ce59f4fcccb612d6a7acb3af6d7
          env:
            TZ: Europe/Paris
          ports:
            - name: http
              containerPort: 9705
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  port: http
                  path: /ping
            readiness:
              enabled: true
              spec:
                httpGet:
                  port: http
                  path: /ping

  service:
    jellyfin:
      controller: jellyfin
      type: ClusterIP
      ports:
        http:
          port: 8096
    jellyseerr:
      controller: jellyseerr
      type: ClusterIP
      ports:
        http:
          port: 5055
    jellystat:
      controller: jellystat
      type: ClusterIP
      ports:
        http:
          port: 3000
    sonarr:
      controller: sonarr
      type: ClusterIP
      ports:
        http:
          port: 8989
    radarr:
      controller: radarr
      type: ClusterIP
      ports:
        http:
          port: 7878
    lidarr:
      controller: lidarr
      type: ClusterIP
      ports:
        http:
          port: 8686
    prowlarr:
      controller: prowlarr
      type: ClusterIP
      ports:
        http:
          port: 9696
    bazarr:
      controller: bazarr
      type: ClusterIP
      ports:
        http:
          port: 6767
    flaresolverr:
      controller: flaresolverr
      type: ClusterIP
      ports:
        http:
          port: 8191
    qbittorrent:
      controller: qbittorrent
      type: ClusterIP
      ports:
        http:
          port: 8080
    filebrowser-quantum:
      controller: filebrowser-quantum
      type: ClusterIP
      ports:
        http:
          port: 8080
    slskd:
      controller: slskd
      type: ClusterIP
      ports:
        http:
          port: 5030
    huntarr:
      enabled: false
      controller: huntarr
      type: ClusterIP
      ports:
        http:
          port: 9705

  ingress:
    jellyfin:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
        nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0,::/0"
      className: "nginx"
      hosts:
        - host: &host jf.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: jellyfin
                port: http
      tls:
        - secretName: jellyfin-tls
          hosts:
            - *host

    jellyseerr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host js.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: jellyseerr
                port: http
      tls:
        - secretName: jellyseerr-tls
          hosts:
            - *host

    jellystat:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host jstat.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: jellystat
                port: http
      tls:
        - secretName: jellystat-tls
          hosts:
            - *host

    sonarr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
        nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
        nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
      className: "nginx"
      hosts:
        - host: &host son.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: sonarr
                port: http
      tls:
        - secretName: sonarr-tls
          hosts:
            - *host

    radarr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
        nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
        nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
      className: "nginx"
      hosts:
        - host: &host rad.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: radarr
                port: http
      tls:
        - secretName: radarr-tls
          hosts:
            - *host

    lidarr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
        nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
        nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
      className: "nginx"
      hosts:
        - host: &host lid.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: lidarr
                port: http
      tls:
        - secretName: lidarr-tls
          hosts:
            - *host

    prowlarr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
        nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
        nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
      className: "nginx"
      hosts:
        - host: &host prow.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: prowlarr
                port: http
      tls:
        - secretName: prowlarr-tls
          hosts:
            - *host

    bazarr:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host baz.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: bazarr
                port: http
      tls:
        - secretName: bazarr-tls
          hosts:
            - *host

    qbittorrent:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host qb.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: qbittorrent
                port: http
      tls:
        - secretName: qbittorrent-tls
          hosts:
            - *host

    filebrowser-quantum:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
        nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
        nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
        nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-User
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
      className: "nginx"
      hosts:
        - host: &host fbq.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: filebrowser-quantum
                port: http
      tls:
        - secretName: filebrowser-quantum-tls
          hosts:
            - *host

    slskd:
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host slskd.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: slskd
                port: http
      tls:
        - secretName: slskd-tls
          hosts:
            - *host

    huntarr:
      enabled: false
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
      className: "nginx"
      hosts:
        - host: &host hunt.terence.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: huntarr
                port: http
      tls:
        - secretName: huntarr-tls
          hosts:
            - *host

  persistence:
    data:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1200Gi
      labels:
        velero.io/exclude-from-backup: "true"
      advancedMounts:
        jellyfin:
          jellyfin:
            - path: /data/media
              subPath: media
        sonarr:
          sonarr:
            - path: /data
        radarr:
          radarr:
            - path: /data
        lidarr:
          lidarr:
            - path: /data
        bazarr:
          bazarr:
            - path: /data
        qbittorrent:
          qbittorrent:
            - path: /data/download
              subPath: download
        filebrowser-quantum:
          filebrowser-quantum:
            - path: /data
        slskd:
          slskd:
            - path: /download
              subPath: download/slskd
        soularr:
          soularr:
            - path: /downloads
              subPath: download/slskd/complete

    music:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 100Gi
      advancedMounts:
        lidarr:
          lidarr:
            - path: /data/media/music
        filebrowser-quantum:
          filebrowser-quantum:
            - path: /music
        slskd:
          slskd:
            - path: /music
        jellyfin:
          jellyfin:
            - path: /data/media/music
        soularr:
          soularr:
            - path: /data

    jellyfin-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 30Gi
      advancedMounts:
        jellyfin:
          jellyfin:
            - path: /config

    jellyfin-hwa:
      enabled: true
      type: hostPath
      hostPath: /dev/dri/renderD128
      hostPathType: "CharDevice"
      advancedMounts:
        jellyfin:
          jellyfin:
            - path: /dev/dri/renderD128

    jellyseerr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        jellyseerr:
          jellyseerr:
            - path: /app/config

    jellystat-backup-data:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        jellystat:
          jellystat:
            - path: /app/backend/backup-data

    sonarr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        sonarr:
          sonarr:
            - path: /config

    radarr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        radarr:
          radarr:
            - path: /config

    lidarr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 2Gi
      advancedMounts:
        lidarr:
          lidarr:
            - path: /config

    qbittorrent-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        qbittorrent:
          qbittorrent:
            - path: /config

    gluetun-device:
      enabled: true
      type: hostPath
      hostPath: /dev/net/tun
      hostPathType: "CharDevice"
      advancedMounts:
        qbittorrent:
          gluetun:
            - path: /dev/net/tun

    prowlarr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 3Gi
      advancedMounts:
        prowlarr:
          prowlarr:
            - path: /config

    bazarr-config:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 100Mi
      advancedMounts:
        bazarr:
          bazarr:
            - path: /config

    configarr-cache:
      enabled: true
      type: emptyDir
      advancedMounts:
        configarr:
          configarr:
            - path: /app/repos
              subPath: configarr-repos

    configarr-config:
      type: configMap
      identifier: configarr-config
      advancedMounts:
        configarr:
          configarr:
            - path: /app/config/config.yml
              subPath: config.yml

    configarr-secrets:
      enabled: true
      type: secret
      name: configarr-secrets
      items:
        - key: secrets.yml
          path: secrets.yml
      advancedMounts:
        configarr:
          configarr:
            - path: /app/config/secrets.yml
              subPath: secrets.yml

    filebrowser-quantum-db:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 100Mi
      advancedMounts:
        filebrowser-quantum:
          filebrowser-quantum:
            - path: /home/filebrowser/database

    filebrowser-quantum-config:
      type: configMap
      identifier: filebrowser-quantum-config
      advancedMounts:
        filebrowser-quantum:
          filebrowser-quantum:
            - path: /home/filebrowser/config.yaml
              subPath: config.yaml

    slskd-config:
      type: secret
      name: slskd-config
      advancedMounts:
        slskd:
          slskd:
            - path: /config
              readOnly: true

    slskd-data:
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: 500Mi
      advancedMounts:
        slskd:
          slskd:
            - path: /app

    gluetun-slskd-device:
      enabled: true
      type: hostPath
      hostPath: /dev/net/tun
      hostPathType: "CharDevice"
      advancedMounts:
        slskd:
          gluetun:
            - path: /dev/net/tun

    soularr-config:
      type: secret
      name: soularr-config
      advancedMounts:
        soularr:
          soularr:
            - path: /data/config.ini
              subPath: config.ini

    # huntarr-config:
    #   type: persistentVolumeClaim
    #   accessMode: ReadWriteOnce
    #   size: 1Gi
    #   advancedMounts:
    #     huntarr:
    #       huntarr:
    #         - path: /config

  configMaps:
    configarr-config:
      data:
        config.yml: |
          trashGuideUrl: https://github.com/TRaSH-Guides/Guides
          recyclarrConfigUrl: https://github.com/recyclarr/config-templates

          sonarr:
            series:
              base_url: http://arr-stack-sonarr:8989
              api_key: !secret SONARR_API_KEY

              quality_definition:
                type: series

              include:
                - template: sonarr-quality-definition-series
                - template: sonarr-v4-quality-profile-web-1080p
                - template: sonarr-v4-custom-formats-web-1080p
                - template: sonarr-v4-quality-profile-bluray-web-1080p-french-vostfr
                - template: sonarr-v4-custom-formats-bluray-web-1080p-french-vostfr

              custom_formats: []

          radarr:
            movies:
              base_url: http://arr-stack-radarr:7878
              api_key: !secret RADARR_API_KEY

              include:
                - template: radarr-quality-definition-movie
                - template: radarr-quality-profile-hd-bluray-web
                - template: radarr-custom-formats-hd-bluray-web
                - template: radarr-quality-profile-remux-web-1080p
                - template: radarr-custom-formats-remux-web-1080p
                - template: radarr-quality-profile-hd-bluray-web-french-vostfr
                - template: radarr-custom-formats-hd-bluray-web-french-vostfr
                - template: radarr-quality-profile-hd-remux-web-french-vostfr
                - template: radarr-custom-formats-hd-remux-web-french-vostfr

              custom_formats: []

    filebrowser-quantum-config:
      data:
        config.yaml: |
          server:
            port: 8080
            database: "database/database.db"
            sources:
              - path: /data
              - path: /music
          auth:
            methods:
              noauth: false
              password:
                enabled: false
              proxy:
                enabled: true
                header: "x-auth-request-user"
                createUser: true
          userDefaults:
            permissions:
              api: true
              admin: true
              modify: true
              share: true
              realtime: true

cnpg-cluster-jellystat:
  type: postgresql
  mode: standalone
  version:
    postgresql: "17"
  cluster:
    instances: 1
    imageCatalogRef:
      kind: ClusterImageCatalog
      name: postgresql
    storage:
      size: 5Gi
    roles:
      - name: jellystat
        connectionLimit: -1
        ensure: present
        createdb: true
        inherit: true
        login: true
    resources: {}
    primaryUpdateMethod: switchover
    primaryUpdateStrategy: unsupervised
    logLevel: "info"
    monitoring:
      enabled: true
      podMonitor:
        enabled: true
    postgresql: {}
    initdb:
      database: jellystat
