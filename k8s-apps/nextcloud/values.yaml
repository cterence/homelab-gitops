nextcloud:
  ## Official nextcloud image version
  ## ref: https://hub.docker.com/r/library/nextcloud/tags/
  ##
  image:
    repository: nextcloud
    flavor: apache
    # default is generated by flavor and appVersion
    tag:
    pullPolicy: IfNotPresent
    # pullSecrets:
    #   - myRegistrKeySecretName

  nameOverride: ""
  fullnameOverride: ""
  podAnnotations: {}
  deploymentAnnotations: {}
  deploymentLabels: {}

  # Number of replicas to be deployed
  replicaCount: 1

  ## Allowing use of ingress controllers
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    enabled: true
    className: nginx
    annotations:
      external-dns.alpha.kubernetes.io/target: home.terence.cloud
      # To circumvent cloudflare's 150MB upload limit
      external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
      nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0"
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: letsencrypt
      # Keep this in sync with the README.md:
      nginx.ingress.kubernetes.io/server-snippet: |-
        server_tokens off;
        proxy_hide_header X-Powered-By;
        rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
        rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
        rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
        rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
        location = /.well-known/carddav {
          return 301 $scheme://$host/remote.php/dav;
        }
        location = /.well-known/caldav {
          return 301 $scheme://$host/remote.php/dav;
        }
        location = /robots.txt {
          allow all;
          log_not_found off;
          access_log off;
        }
        location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
          deny all;
        }
        location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
          deny all;
        }
      gethomepage.dev/enabled: "true"
      gethomepage.dev/name: "Nextcloud"
      gethomepage.dev/description: "A safe home for all your data."
      gethomepage.dev/group: "Media"
      gethomepage.dev/icon: "nextcloud"
    tls:
      - secretName: nextcloud-tls
        hosts:
          - next.terence.cloud
    labels: {}
    path: /
    pathType: Prefix

  # Allow configuration of lifecycle hooks
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
  lifecycle:
    {}
    # postStartCommand: []
    # preStopCommand: []

  phpClientHttpsFix:
    enabled: false
    protocol: https

  nextcloud:
    host: next.terence.cloud
    # username: admin
    # password: changeme
    ## Use an existing secret
    existingSecret:
      enabled: true
      secretName: nextcloud
      # usernameKey: nextcloud-username
      # passwordKey: nextcloud-password
      tokenKey: nextcloud-token
      # smtpUsernameKey: smtp-username
      # smtpPasswordKey: smtp-password
      # smtpHostKey: smtp-host
    update: 0
    # If web server is not binding default port, you can define it
    containerPort: 80
    datadir: /var/www/html/data
    persistence:
      subPath:
    mail:
      enabled: false
      fromAddress: user
      domain: domain.com
      smtp:
        host: domain.com
        secure: ssl
        port: 465
        authtype: LOGIN
        name: user
        password: pass
    # PHP Configuration files
    # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
    phpConfigs: {}
    # Default config files
    # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
    # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/16.0/apache/config
    defaultConfigs:
      # To protect /var/www/html/config
      .htaccess: true
      # Redis default configuration
      redis.config.php: true
      # Apache configuration for rewrite urls
      apache-pretty-urls.config.php: true
      # Define APCu as local cache
      apcu.config.php: true
      # Apps directory configs
      apps.config.php: true
      # Used for auto configure database
      autoconfig.php: true
      # SMTP default configuration
      smtp.config.php: true
    # Extra config files created in /var/www/html/config/
    # ref: https://docs.nextcloud.com/server/15/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file
    configs: {}

    # For example, to use S3 as primary storage
    # ref: https://docs.nextcloud.com/server/13/admin_manual/configuration_files/primary_storage.html#simple-storage-service-s3
    #
    #  configs:
    #    s3.config.php: |-
    #      <?php
    #      $CONFIG = array (
    #        'objectstore' => array(
    #          'class' => '\\OC\\Files\\ObjectStore\\S3',
    #          'arguments' => array(
    #            'bucket'     => 'my-bucket',
    #            'autocreate' => true,
    #            'key'        => 'xxx',
    #            'secret'     => 'xxx',
    #            'region'     => 'us-east-1',
    #            'use_ssl'    => true
    #          )
    #        )
    #      );

    # Hooks for auto configuration
    # Here you could write small scripts which are placed in `/docker-entrypoint-hooks.d/<hook-name>/helm.sh`
    # ref: https://github.com/nextcloud/docker?tab=readme-ov-file#auto-configuration-via-hook-folders
    hooks:
      pre-installation:
      post-installation:
      pre-upgrade:
      post-upgrade:
      before-starting:

    ## Strategy used to replace old pods
    ## IMPORTANT: use with care, it is suggested to leave as that for upgrade purposes
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    strategy:
      type: Recreate
      # type: RollingUpdate
      # rollingUpdate:
      #   maxSurge: 1
      #   maxUnavailable: 0

    ##
    ## Extra environment variables
    extraEnv:
      - name: APACHE_BODY_LIMIT
        value: "0"

    # Extra init containers that runs before pods start.
    extraInitContainers: []
    #  - name: do-something
    #    image: busybox
    #    command: ['do', 'something']

    # Extra sidecar containers.
    extraSidecarContainers:
      # Daily upload of Nextcloud images to immich
      # - name: immich-nextcloud-uploader
      #   image: ghcr.io/immich-app/immich-cli:2.2.77@sha256:eec2b8e88d5436a047b97739749b5ab7f3e1a2bcd6cb576aff30043830945aa2
      #   command:
      #     - /bin/sh
      #     - -c
      #     - |
      #       while true; do
      #         node /usr/src/app/dist upload /import --recursive
      #         sleep 86400
      #       done
      #   env:
      #     - name: IMMICH_API_KEY
      #       valueFrom:
      #         secretKeyRef:
      #           name: immich-nextcloud-uploader-api-key
      #           key: api-key
      #     - name: IMMICH_INSTANCE_URL
      #       value: http://immich-server.immich:2283/api
      #   securityContext:
      #     runAsUser: 33
      #     runAsGroup: 33
      #     runAsNonRoot: true
      #     readOnlyRootFilesystem: false
      #   volumeMounts:
      #     - name: nextcloud-main
      #       mountPath: /import
      #       subPath: data/terence/files/Images
      #       readOnly: true
      - name: generate-previews
        image: nextcloud:31.0.7@sha256:4193490144a6f2cdcab446735c356ea37b8bc7635d47a2a29de200f0a6b6e435
        command:
          - /bin/sh
          - -c
          - |
            cd /var/www/html
            while true; do
              php occ preview:pre-generate -vvv
              sleep 3600
            done
        env:
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                key: host
                name: nextcloud-cnpg-cluster-pg17-app
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                key: dbname
                name: nextcloud-cnpg-cluster-pg17-app
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: nextcloud-cnpg-cluster-pg17-app
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: nextcloud-cnpg-cluster-pg17-app
        securityContext:
          runAsUser: 33
          runAsGroup: 33
          runAsNonRoot: true
          readOnlyRootFilesystem: false
        volumeMounts:
          - mountPath: /var/www/
            name: nextcloud-main
            subPath: root
          - mountPath: /var/www/html
            name: nextcloud-main
            subPath: html
          - mountPath: /var/www/html/data
            name: nextcloud-main
            subPath: data
          - mountPath: /var/www/html/config
            name: nextcloud-main
            subPath: config
          - mountPath: /var/www/html/custom_apps
            name: nextcloud-main
            subPath: custom_apps
          - mountPath: /var/www/tmp
            name: nextcloud-main
            subPath: tmp
          - mountPath: /var/www/html/themes
            name: nextcloud-main
            subPath: themes

    # Extra mounts for the pods. Example shown is for connecting a legacy NFS volume
    # to NextCloud pods in Kubernetes. This can then be configured in External Storage
    extraVolumes:
    #  - name: nfs
    #    nfs:
    #      server: "10.0.0.1"
    #      path: "/nextcloud_data"
    #      readOnly: false
    extraVolumeMounts:
    #  - name: nfs
    #    mountPath: "/legacy_data"

    # Set securityContext parameters for the nextcloud CONTAINER only (will not affect nginx container).
    # For example, you may need to define runAsNonRoot directive
    securityContext: {}
    #   runAsUser: 33
    #   runAsGroup: 33
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: false

    # Set securityContext parameters for the entire pod. For example, you may need to define runAsNonRoot directive
    podSecurityContext: {}
    #   runAsUser: 33
    #   runAsGroup: 33
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: false

    # Settings for the MariaDB init container
    mariaDbInitContainer:
      # Set mariadb initContainer securityContext parameters. For example, you may need to define runAsNonRoot directive
      securityContext: {}

    # Settings for the PostgreSQL init container
    postgreSqlInitContainer:
      # Set postgresql initContainer securityContext parameters. For example, you may need to define runAsNonRoot directive
      securityContext: {}

  internalDatabase:
    enabled: false
    name: nextcloud

  ##
  ## External database configuration
  ##
  externalDatabase:
    enabled: true

    ## Supported database engines: mysql or postgresql
    type: postgresql

    ## Database host
    host: nextcloud-postgresql

    ## Database user
    user: nextcloud

    ## Database password
    password: ""

    ## Database name
    database: nextcloud

    ## Use a existing secret
    existingSecret:
      enabled: true
      secretName: nextcloud-cnpg-cluster-pg17-app
      usernameKey: username
      passwordKey: password
      hostKey: host
      databaseKey: dbname

  ##
  ## MariaDB chart configuration
  ## ref: https://github.com/bitnami/charts/tree/main/bitnami/mariadb
  ##
  mariadb:
    ## Whether to deploy a mariadb server from the bitnami mariab db helm chart
    # to satisfy the applications database requirements. if you want to deploy this bitnami mariadb, set this and externalDatabase to true
    # To use an ALREADY DEPLOYED mariadb database, set this to false and configure the externalDatabase parameters
    enabled: false

    auth:
      database: nextcloud
      username: nextcloud
      password: changeme
      # Use existing secret (auth.rootPassword, auth.password, and auth.replicationPassword will be ignored).
      # secret must contain the keys mariadb-root-password, mariadb-replication-password and mariadb-password
      existingSecret: ""

    architecture: standalone

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    primary:
      persistence:
        enabled: false
        # Use an existing Persistent Volume Claim (must be created ahead of time)
        # existingClaim: ""
        # storageClass: ""
        accessMode: ReadWriteOnce
        size: 8Gi

  ##
  ## PostgreSQL chart configuration
  ## for more options see https://github.com/bitnami/charts/tree/main/bitnami/postgresql
  ##
  postgresql:
    enabled: false
    global:
      postgresql:
        # global.postgresql.auth overrides postgresql.auth
        auth:
          username: nextcloud
          database: nextcloud
          # Name of existing secret to use for PostgreSQL credentials.
          # auth.postgresPassword, auth.password, and auth.replicationPassword will be ignored and picked up from this secret.
          # secret might also contains the key ldap-password if LDAP is enabled.
          # ldap.bind_password will be ignored and picked from this secret in this case.
          existingSecret: "nextcloud-postgres-user-password"
          # Names of keys in existing secret to use for PostgreSQL credentials
          secretKeys:
            adminPasswordKey: "ADMIN_PASSWORD"
            userPasswordKey: "DB_PASSWORD"
            replicationPasswordKey: "REPLICATION_PASSWORD"
    primary:
      resourcesPreset: "small"
      persistence:
        enabled: true
        # Use an existing Persistent Volume Claim (must be created ahead of time)
        # existingClaim: ""
        # storageClass: ""

  ##
  ## Redis chart configuration
  ## for more options see https://github.com/bitnami/charts/tree/main/bitnami/redis
  ##

  redis:
    enabled: true
    architecture: standalone
    auth:
      enabled: false
      usePasswordFiles: false
      password: "changeme"
      # name of an existing secret with Redis® credentials (instead of auth.password), must be created ahead of time
      existingSecret: ""
      # Password key to be retrieved from existing secret
      existingSecretPasswordKey: ""
    master:
      resourcesPreset: micro
      persistence:
        labels:
          velero.io/exclude-from-backup: "true"
  ## Cronjob to execute Nextcloud background tasks
  ## ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/background_jobs_configuration.html#cron
  ##
  cronjob:
    enabled: true

    ## Cronjob sidecar resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources: {}

    # Allow configuration of lifecycle hooks
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
    lifecycle:
      {}
      # postStartCommand: []
      # preStopCommand: []
    # Set securityContext parameters. For example, you may need to define runAsNonRoot directive
    securityContext: {}
    #   runAsUser: 33
    #   runAsGroup: 33
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: true

  service:
    type: ClusterIP
    port: 8080
    loadBalancerIP: ""

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    # Nextcloud Data (/var/www/html)
    enabled: true
    annotations: {}
    ## nextcloud data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    accessMode: ReadWriteOnce
    size: 200Gi

    ## Use an additional pvc for the data directory rather than a subpath of the default PVC
    ## Useful to store data on a different storageClass (e.g. on slower disks)
    nextcloudData:
      enabled: false
      subPath:
      annotations: {}
      # storageClass: "-"
      # existingClaim:
      accessMode: ReadWriteOnce
      size: 8Gi

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  ## Liveness and readiness probe values
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

  ## Enable pod autoscaling using HorizontalPodAutoscaler
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ##
  hpa:
    enabled: false
    cputhreshold: 60
    minPods: 1
    maxPods: 10

  tolerations: []

  affinity: {}

  ## Prometheus Exporter / Metrics
  ##
  metrics:
    enabled: true

    replicaCount: 1
    # Optional: becomes NEXTCLOUD_SERVER env var in the nextcloud-exporter container.
    # Without it, we will use the full name of the nextcloud service
    server: ""
    # The metrics exporter needs to know how you serve Nextcloud either http or https
    https: false
    # Use API token if set, otherwise fall back to password authentication
    # https://github.com/xperimental/nextcloud-exporter#token-authentication
    # Currently you still need to set the token manually in your nextcloud install
    token: ""
    timeout: 5s
    # if set to true, exporter skips certificate verification of Nextcloud server.
    tlsSkipVerify: false
    info:
      # Optional: becomes NEXTCLOUD_INFO_APPS env var in the nextcloud-exporter container.
      # Enables gathering of apps-related metrics. Defaults to false
      apps: false

    image:
      repository: xperimental/nextcloud-exporter
      tag: 0.8.0@sha256:a4163ed0041217dde749d398b98a8ec9961b493714f6042e03223dca1bdb68af
      pullPolicy: IfNotPresent
      # pullSecrets:
      #   - myRegistrKeySecretName

    ## Metrics exporter resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    # resources: {}

    ## Metrics exporter pod Annotation and Labels
    # podAnnotations: {}

    # podLabels: {}

    service:
      type: ClusterIP
      ## Use serviceLoadBalancerIP to request a specific static IP,
      ## otherwise leave blank
      # loadBalancerIP:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9205"
      labels: {}

    ## Prometheus Operator ServiceMonitor configuration
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
      ##
      enabled: true

      ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
      ##
      namespace: ""

      ## @param metrics.serviceMonitor.namespaceSelector The selector of the namespace where the target service is located (defaults to the release namespace)
      namespaceSelector:

      ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
      ##
      jobLabel: ""

      ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      ##
      interval: 30s

      ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      ##
      scrapeTimeout: ""

      ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
      ##
      labels: {}

  rbac:
    enabled: false
    serviceaccount:
      create: true
      name: nextcloud-serviceaccount
      annotations: {}

  ## @param securityContext for nextcloud pod @deprecated Use `nextcloud.podSecurityContext` instead
  securityContext: {}

cnpg-cluster-pg17:
  type: postgresql
  mode: recovery
  version:
    postgresql: "17"
  cluster:
    instances: 1
    imageCatalogRef:
      kind: ClusterImageCatalog
      name: postgresql
    storage:
      size: 10Gi
    resources: {}
    primaryUpdateMethod: switchover
    primaryUpdateStrategy: unsupervised
    logLevel: "info"
    roles:
      - name: nextcloud
        connectionLimit: -1
        ensure: present
        inherit: true
        login: true
        replication: true
    monitoring:
      enabled: true
      podMonitor:
        enabled: true
    postgresql: {}
    initdb:
      database: nextcloud
  recovery:
    method: import
    import:
      type: microservice
      databases: ["nextcloud"]
      schemaOnly: true
      source:
        host: nextcloud-cnpg-cluster-rw
        username: nextcloud
        database: nextcloud
        passwordSecret:
          name: nextcloud-cnpg-cluster-app
          key: password
        sslKeySecret:
          name: nextcloud-cnpg-cluster-replication
          key: tls.key
        sslCertSecret:
          name: nextcloud-cnpg-cluster-replication
          key: tls.crt
        sslRootCertSecret:
          name: nextcloud-cnpg-cluster-ca
          key: ca.crt
