# https://github.com/truecharts/public/blob/master/charts/library/common/values.yaml
home-assistant:
  image:
    repository: docker.io/homeassistant/home-assistant
    pullPolicy: IfNotPresent
    tag: 2025.5.1@sha256:249d5c20ae2ab973bc2ca54c05764e67e2230f14ac5ca5a7d45e228efbb62e67
  service:
    main:
      ports:
        main:
          port: 8123
          targetPort: 8123
  workload:
    main:
      podSpec:
        initContainers:
          init:
            type: init
            enabled: true
            imageSelector: yqImage
            command: /config/init/init.sh

  homeassistant:
    trusted_proxies:
      - 10.244.0.0/16
  # Enable a prometheus-operator servicemonitor
  prometheus:
    serviceMonitor:
      enabled: true
      # interval: 1m
      # additionalLabels: {}
  persistence:
    config:
      enabled: true
      mountPath: /config
      targetSelectAll: true
      size: 1Gi
    init:
      enabled: true
      type: configmap
      objectName: init
      mountPath: "/config/init"
      defaultMode: "0777"
      readOnly: true
      size: 100Mi
      targetSelector:
        main:
          init: {}
    database-secret:
      enabled: true
      type: secret
      objectName: cnpg-cluster-pg17-app
      mountPath: "/config/database-secret"
      defaultMode: "0400"
      readOnly: true
      optional: true
      items:
        - key: uri
          path: uri
      targetSelector:
        main:
          init: {}
  configmap:
    init:
      enabled: true
      data:
        init.sh: |-
          #!/bin/sh
          db_uri=$(printf "%s?client_encoding=utf8" "$(cat /config/database-secret/uri)")
          db_uri=$(echo "$db_uri" | sed 's/\.{{ $.Release.Namespace }}//')
          config="/config/configuration.yaml"
          default="/config/init"
          if [ ! -f "$config" ]; then
            echo "File [$config] does NOT exist. Creating..."
            cp "$default/configuration.yaml.default" "$config"
          fi
          if ! grep -q "recorder:" "$config"; then
            echo "Section [recorder] does NOT exist in [$config]. Appending..."
            echo "" >> "$config"
            cat "$default/recorder.default" >> "$config"
          fi
          if ! grep -q "http:" "$config"; then
            echo "Section [http] does NOT exist in [$config]. Appending..."
            echo "" >> "$config"
            cat "$default/http.default" >> "$config"
          fi

          yq_query=".recorder.db_url = \"$db_uri\""

          echo "Updating database URL"
          yq -i "$yq_query" "$config"
          echo "Done"

          echo "Creating include files..."
          for include_file in groups.yaml automations.yaml scripts.yaml scenes.yaml; do
            if [ ! -f "/config/$include_file" ]; then
              echo "File [$include_file] missing. Creating"
              touch "/config/$include_file"
            fi
          done

          cd "/config" || echo "Could not change path to /config"
          echo "Creating custom_components directory..."
          mkdir -p "/config/custom_components" || echo "custom_components directory already exists"

          echo "Changing to the custom_components directory..."
          cd "/config/custom_components" || echo "Could not change path to /config/custom_components"

          echo "Downloading HACS"
          wget "https://github.com/hacs/integration/releases/latest/download/hacs.zip" || exit 0

          if [ -d "/config/custom_components/hacs" ]; then
            echo "HACS directory already exist, cleaning up..."
            rm -R "/config/custom_components/hacs"
          fi

          echo "Creating HACS directory..."
          mkdir -p "/config/custom_components/hacs"

          echo "Unpacking HACS..."
          unzip "/config/custom_components/hacs.zip" -d "/config/custom_components/hacs" >/dev/null 2>&1

          echo "Removing HACS zip file..."
          rm "/config/custom_components/hacs.zip"
          echo "Installation complete."
        configuration.yaml.default: |-
          # Configure a default setup of Home Assistant (frontend, api, etc)
          default_config:

          # Text to speech
          tts:
            - platform: google_translate

          group: !include groups.yaml
          automation: !include automations.yaml
          script: !include scripts.yaml
          scene: !include scenes.yaml
        recorder.default: |-
          recorder:
            purge_keep_days: 30
            commit_interval: 3
            db_url: edited_by_init_sh
        http.default: |-
          http:
            use_x_forwarded_for: true
            trusted_proxies:
              {{- if hasKey .Values "ixChartContext" }}
              - {{ .Values.ixChartContext.kubernetes_config.cluster_cidr }}
              {{- else }}
                {{- range .Values.homeassistant.trusted_proxies }}
              - {{ . }}
                {{- end }}
              {{- end }}
  cnpg:
    main:
      enabled: false
      user: home-assistant
      database: home-assistant
      cluster:
        instances: 1
        storage:
          size: "10Gi"
        walStorage:
          size: "5Gi"
  portal:
    open:
      enabled: true
  securityContext:
    container:
      readOnlyRootFilesystem: false
      runAsNonRoot: false
      runAsUser: 0
      runAsGroup: 0
      capabilities:
        add:
          - CAP_NET_RAW
          - CAP_NET_BIND_SERVICE
  ingress:
    main:
      enabled: true
      annotations:
        external-dns.alpha.kubernetes.io/target: home.terence.cloud
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
        cert-manager.io/cluster-issuer: letsencrypt
        nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0"
      ingressClassName: "nginx"
      hosts:
        - host: &host "ha.terence.cloud"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: home-assistant-tls
          hosts:
            - *host
      integrations:
        traefik:
          enabled: false
  TZ: Europe/Paris
  resources:
    limits:
      cpu: 200m
    requests:
      cpu: 100m
      memory: 250Mi

cnpg-cluster-pg17:
  type: postgresql
  mode: recovery
  version:
    postgresql: "17"
  cluster:
    instances: 1
    imageCatalogRef:
      kind: ClusterImageCatalog
      name: postgresql
    storage:
      size: 10Gi
    resources: {}
    primaryUpdateMethod: switchover
    primaryUpdateStrategy: unsupervised
    logLevel: "info"
    monitoring:
      enabled: true
      podMonitor:
        enabled: true
    postgresql: {}
    initdb:
      database: home-assistant
  recovery:
    method: import
    import:
      type: microservice
      databases: ["home-assistant"]
      schemaOnly: true
      source:
        host: home-assistant-cnpg-main-rw
        username: home-assistant
        database: home-assistant
        passwordSecret:
          name: home-assistant-cnpg-main-user
          key: password
        sslKeySecret:
          name: home-assistant-cnpg-main-replication
          key: tls.key
        sslCertSecret:
          name: home-assistant-cnpg-main-replication
          key: tls.crt
        sslRootCertSecret:
          name: home-assistant-cnpg-main-ca
          key: ca.crt
