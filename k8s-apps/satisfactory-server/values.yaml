# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/common-3.4.0/charts/library/common/values.schema.json
app-template:
  # defaultPodOptions:
  #   nodeSelector:
  #     kubernetes.io/hostname: homelab2
  #   automountServiceAccountToken: false
  #   securityContext:
  #     runAsUser: 568
  #     runAsGroup: 568
  #     fsGroup: 568
  #     fsGroupChangePolicy: "OnRootMismatch"

  controllers:
    # Configure the main controller
    main:
      type: statefulset
      annotations:
        reloader.stakater.com/auto: "true"
      pod:
        nodeSelector:
          kubernetes.io/hostname: homelab2
      containers:
        # Configure the main application container
        main:
          image:
            repository: wolveix/satisfactory-server
            tag: v1.9.5@sha256:88507d728a683714a4fac54d881a8f80db418509bc7db7bad660deda64b72247
          env:
            TZ: Europe/Paris
          ports:
            - name: stsf-udp
              containerPort: 7777
              protocol: UDP
            - name: stsf-tcp
              containerPort: 7777
              protocol: TCP
            - name: frm
              containerPort: 8080
              protocol: TCP
          probes:
            startup:
              enabled: true
              custom: true
              spec:
                initialDelaySeconds: 60
                timeoutSeconds: 1
                periodSeconds: 5
                failureThreshold: 30
                exec:
                  command:
                    - /bin/bash
                    - -c
                    - chmod +x /healthcheck.sh && if [[ "$(/healthcheck.sh)" != true ]]; then exit 1; fi
            liveness:
              enabled: true
              custom: true
              spec:
                exec:
                  command:
                    - /bin/bash
                    - -c
                    - if [[ "$(/healthcheck.sh)" != true ]]; then exit 1; fi
            readiness:
              enabled: true
              custom: true
              spec:
                exec:
                  command:
                    - /bin/bash
                    - -c
                    - if [[ "$(/healthcheck.sh)" != true ]]; then exit 1; fi
        sftp:
          image:
            repository: atmoz/sftp
            tag: latest@sha256:0960390462a4441dbb63698d7c185b76a41ffcee7b78ff4adf275f3e66f9c475
          env:
            TZ: Europe/Paris
          args:
            - "satisfactory:$5$QXWaERQfCbhenZUo$gmFbTEx0oHuFTeYR1VM9cKNSfbs5o8MFFq9sioFOp14:e:1000:1000"
          ports:
            - name: sftp
              containerPort: 22
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                tcpSocket:
                  port: 22
            readiness:
              enabled: true
              custom: true
              spec:
                tcpSocket:
                  port: 22
      statefulset:
        volumeClaimTemplates:
          - name: config
            accessMode: ReadWriteOnce
            size: 10Gi
            advancedMounts:
              main:
                - path: /config
              sftp:
                - path: /home/satisfactory/satisfactory
    frm:
      type: deployment
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        # Configure the main application container
        companion:
          image:
            repository: featheredtoast/ficsit-remote-monitoring-companion
            tag: latest@sha256:73464722ca5d0b45c7cdfb4383cc727b4b6281c1214f6868262b09fec001fad0
          env:
            TZ: Europe/Paris
            FRM_HOST: satisfactory-server-frm
            FRM_PORT: 8080
          ports:
            - name: metrics
              containerPort: 9000
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /metrics
                  port: 9000
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /metrics
                  port: 9000
        cache:
          image:
            repository: featheredtoast/ficsit-remote-monitoring-cache
            tag: latest@sha256:cecb332c3e11747f1f0160720f59c8032a9e689807eb5af2ba9459d1edfb4282
          env:
            TZ: Europe/Paris
            FRM_HOST: satisfactory-server-frm
            FRM_PORT: 8080
            PG_HOST:
              valueFrom:
                secretKeyRef:
                  name: satisfactory-server-cnpg-cluster-pg17-app
                  key: host
            PG_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: satisfactory-server-cnpg-cluster-pg17-app
                  key: password
            PG_USER:
              valueFrom:
                secretKeyRef:
                  name: satisfactory-server-cnpg-cluster-pg17-app
                  key: user
            PG_DB:
              valueFrom:
                secretKeyRef:
                  name: satisfactory-server-cnpg-cluster-pg17-app
                  key: dbname
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /metrics
                  port: 9000
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /metrics
                  port: 9000

  service:
    # Configure a service for the main application
    main:
      controller: main
      type: LoadBalancer
      ports:
        stsf-udp:
          port: 7777
          protocol: UDP
        stsf-tcp:
          port: 7777
          protocol: TCP
    frm:
      controller: main
      ports:
        frm:
          port: 8080
    sftp:
      controller: main
      type: LoadBalancer
      ports:
        sftp:
          targetPort: sftp
          port: 2222
    frmcompanion:
      controller: frm
      ports:
        metrics:
          port: 9000

  serviceMonitor:
    frm:
      enabled: true
      serviceName: satisfactory-server-frmcompanion
      endpoints:
        - port: metrics
          scheme: http
          path: /metrics
          interval: 15s
          scrapeTimeout: 10s

cnpg-cluster-pg17:
  type: postgresql
  mode: recovery
  version:
    postgresql: "17"
  cluster:
    instances: 1
    imageCatalogRef:
      kind: ClusterImageCatalog
      name: postgresql
    storage:
      size: 10Gi
    resources: {}
    primaryUpdateMethod: switchover
    primaryUpdateStrategy: unsupervised
    logLevel: "info"
    monitoring:
      enabled: true
      podMonitor:
        enabled: true
    postgresql: {}
    initdb:
      database: frm
  recovery:
    method: import
    import:
      type: microservice
      databases: ["frm"]
      schemaOnly: true
      source:
        host: satisfactory-server-cnpg-cluster-rw
        username: frm
        database: frm
        passwordSecret:
          name: satisfactory-server-cnpg-cluster-app
          key: password
        sslKeySecret:
          name: satisfactory-server-cnpg-cluster-replication
          key: tls.key
        sslCertSecret:
          name: satisfactory-server-cnpg-cluster-replication
          key: tls.crt
        sslRootCertSecret:
          name: satisfactory-server-cnpg-cluster-ca
          key: ca.crt
  backups:
    enabled: true
    scheduledBackups: []
    volumeSnapshot:
      className: longhorn
