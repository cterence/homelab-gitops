## This chart relies on the common library chart from bjw-s
## You can find it at https://github.com/bjw-s/helm-charts/tree/main/charts/library/common
## Refer there for more detail about the supported values

# These entries are shared between all the Immich components
immich:
  env:
    REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
    DB_HOSTNAME:
      valueFrom:
        secretKeyRef:
          name: immich-cnpg-cluster-app
          key: host
    DB_USERNAME:
      valueFrom:
        secretKeyRef:
          name: immich-cnpg-cluster-app
          key: username
    DB_DATABASE_NAME:
      valueFrom:
        secretKeyRef:
          name: immich-cnpg-cluster-app
          key: dbname
    # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
    DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: immich-cnpg-cluster-app
          key: password
    IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'
    IMMICH_LOG_LEVEL: log

  immich:
    metrics:
      # Enabling this will create the service monitors needed to monitor immich with the prometheus operator
      enabled: false
    persistence:
      # Main data store for all photos shared between different components.
      library:
        # Automatically creating the library volume is not supported by this chart
        # You have to specify an existing PVC to use
        existingClaim: immich-library-data
        # enabled: true
        # type: persistentVolumeClaim
        # accessMode: ReadWriteOnce
        size: 200Gi
    # configuration is immich-config.json converted to yaml
    # ref: https://immich.app/docs/install/config-file/
    #
    configuration:
      machineLearning:
        duplicateDetection:
          enabled: true
          maxDistance: 0.03
      server:
        externalDomain: https://immich.terence.cloud
      # trash:
      #   enabled: false
      #   days: 30
      # storageTemplate:
      #   enabled: true
      #   template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"

  # Dependencies

  postgresql:
    enabled: false
    image:
      repository: tensorchord/pgvecto-rs
      tag: pg14-v0.2.0@sha256:739cdd626151ff1f796dc95a6591b55a714f341c737e27f045019ceabf8e8c52
    global:
      postgresql:
        auth:
          username: immich
          database: immich
          existingSecret: immich-postgres-user-password
          secretKeys:
            userPasswordKey: "DB_PASSWORD"
            adminPasswordKey: "ADMIN_PASSWORD"
            replicationPasswordKey: "REPLICATION_PASSWORD"
    primary:
      initdb:
        scripts:
          create-extensions.sql: |
            CREATE EXTENSION cube;
            CREATE EXTENSION earthdistance;
            CREATE EXTENSION vectors;
      containerSecurityContext:
        enabled: false
        runAsUser: 0
        runAsGroup: 0
        runAsNonRoot: false
      podSecurityContext:
        enabled: false
      persistence:
        enabled: true
        # existingClaim: immich-postgresql-data

  redis:
    enabled: true
    architecture: standalone
    auth:
      enabled: false
      usePasswordFiles: false
    master:
      resourcesPreset: micro
      persistence:
        labels:
          velero.io/exclude-from-backup: "true"

  # Immich components

  server:
    enabled: true
    image:
      repository: ghcr.io/immich-app/immich-server
      pullPolicy: IfNotPresent
      tag: v1.129.0@sha256:7122354defac839a7ecf541395907c21805f6a2b60b67ee476e66b162f1a355d
    ingress:
      main:
        enabled: true
        annotations:
          # proxy-body-size is set to 0 to remove the body limit on file uploads
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
          external-dns.alpha.kubernetes.io/target: home.terence.cloud
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
          cert-manager.io/cluster-issuer: letsencrypt
          gethomepage.dev/enabled: "true"
          gethomepage.dev/name: "Immich"
          gethomepage.dev/description: "Photo library management."
          gethomepage.dev/group: "Media"
          gethomepage.dev/icon: "immich"
        ingressClassName: nginx
        hosts:
          - host: immich.terence.cloud
            paths:
              - path: "/"
        tls:
          - secretName: immich-tls
            hosts:
              - immich.terence.cloud

  machine-learning:
    enabled: true
    image:
      repository: ghcr.io/immich-app/immich-machine-learning
      pullPolicy: IfNotPresent
      tag: v1.129.0@sha256:072b5eec074476726c38994ca80edc8d19e14859d49b0f1b6aaa04b0ce415f0c
    env:
      TRANSFORMERS_CACHE: /cache
    persistence:
      cache:
        enabled: true
        size: 10Gi
        # Optional: Set this to pvc to avoid downloading the ML models every start.
        type: pvc
        accessMode: ReadWriteOnce
        # storageClass: your-class
        labels:
          velero.io/exclude-from-backup: "true"

cnpg-cluster:
  type: postgresql
  mode: standalone
  version:
    postgresql: "16"
  cluster:
    instances: 1
    imageCatalogRef:
      kind: ImageCatalog
      name: cloudnative-pgvectors
    storage:
      size: 8Gi
      storageClass: ""
    resources: {}
    primaryUpdateMethod: switchover
    primaryUpdateStrategy: unsupervised
    logLevel: "info"
    roles: []
    monitoring:
      enabled: true
      podMonitor:
        enabled: true
    postgresql:
      shared_preload_libraries:
        - "vectors.so"
    initdb:
      database: immich
      postInitSQL:
        - ALTER SYSTEM SET search_path TO "$user", public, vectors;
        - CREATE EXTENSION IF NOT EXISTS "vectors";
        - CREATE EXTENSION IF NOT EXISTS "cube";
        - CREATE EXTENSION IF NOT EXISTS "earthdistance";
