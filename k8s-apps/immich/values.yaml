## This chart relies on the common library chart from bjw-s
## You can find it at https://github.com/bjw-s/helm-charts/tree/main/charts/library/common
## Refer there for more detail about the supported values

# These entries are shared between all the Immich components
immich:
  immich:
    metrics:
      # Enabling this will create the service monitors needed to monitor immich with the prometheus operator
      enabled: false
    persistence:
      # Main data store for all photos shared between different components.
      library:
        # Automatically creating the library volume is not supported by this chart
        # You have to specify an existing PVC to use
        existingClaim: immich-library-data
        # enabled: true
        # type: persistentVolumeClaim
        # accessMode: ReadWriteOnce
    # configuration is immich-config.json converted to yaml
    # ref: https://immich.app/docs/install/config-file/
    #
    configuration:
      machineLearning:
        duplicateDetection:
          enabled: true
          maxDistance: 0.03
      ffmpeg:
        accel: "vaapi"
      server:
        externalDomain: https://immich.terence.cloud
      # trash:
      #   enabled: false
      #   days: 30
      # storageTemplate:
      #   enabled: true
      #   template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"

      oauth:
        autoLaunch: false
        autoRegister: true
        buttonText: Login with Pocket ID
        clientId: aee1fd9a-e4a5-434c-936a-7ebdfb362e51
        clientSecret: $POCKET_ID_CLIENT_SECRET
        defaultStorageQuota: null
        enabled: true
        issuerUrl: https://auth.terence.cloud
        mobileOverrideEnabled: false
        scope: openid email profile
        signingAlgorithm: RS256
        profileSigningAlgorithm: none
        storageLabelClaim: preferred_username
        storageQuotaClaim: immich_quota

  valkey:
    enabled: true
    controllers:
      main:
        containers:
          main:
            image:
              repository: docker.io/valkey/valkey
              tag: 9.0-alpine@sha256:b4ee67d73e00393e712accc72cfd7003b87d0fcd63f0eba798b23251bfc9c394
              pullPolicy: IfNotPresent
    persistence:
      data:
        enabled: true
        size: 1Gi
        type: persistentVolumeClaim
        accessMode: ReadWriteOnce

  # Immich components
  server:
    enabled: true
    IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'
    IMMICH_LOG_LEVEL: log
    IMMICH_CONFIG_FILE: /templated-config/immich-config.yaml
    controllers:
      main:
        strategy: Recreate
        containers:
          main:
            env:
              DB_HOSTNAME:
                valueFrom:
                  secretKeyRef:
                    name: immich-cnpg-cluster-vectorchord-app
                    key: host
              DB_USERNAME:
                valueFrom:
                  secretKeyRef:
                    name: immich-cnpg-cluster-vectorchord-app
                    key: username
              DB_DATABASE_NAME:
                valueFrom:
                  secretKeyRef:
                    name: immich-cnpg-cluster-vectorchord-app
                    key: dbname
              # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
              DB_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: immich-cnpg-cluster-vectorchord-app
                    key: password
            image:
              repository: ghcr.io/immich-app/immich-server
              pullPolicy: IfNotPresent
              tag: v2.2.1@sha256:2c951a4063b55ec2de197fdf6a85e32b05872d3a18a18eaf851b827ff2622814
            securityContext:
              privileged: true
        initContainers:
          envsubst:
            image:
              repository: bhgedigital/envsubst
              tag: latest@sha256:36a92e9344ef965e9318c8d2f70dd35cad654a4615b889c6a4dd483ca1ddec7c
            command: ["/bin/sh", "-c"]
            args:
              - |
                envsubst < /config/immich-config.yaml > /templated-config/immich-config.yaml
            env:
              POCKET_ID_CLIENT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: immich-pocket-id-client-secret
                    key: client-secret
            volumeMounts:
              - name: config
                mountPath: /config
              - name: templated-config
                mountPath: /templated-config
    ingress:
      main:
        enabled: true
        annotations:
          # proxy-body-size is set to 0 to remove the body limit on file uploads
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
          external-dns.alpha.kubernetes.io/target: home.terence.cloud
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
          cert-manager.io/cluster-issuer: letsencrypt
          nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0"
        className: nginx
        hosts:
          - host: immich.terence.cloud
            paths:
              - path: "/"
        tls:
          - secretName: immich-tls
            hosts:
              - immich.terence.cloud
    persistence:
      templated-config:
        enabled: true
        type: emptyDir
        name: "{{ .Release.Name }}-immich-templated-config"
      igpu:
        enabled: true
        type: hostPath
        hostPath: /dev/dri/renderD128
        hostPathType: "CharDevice"
  machine-learning:
    enabled: true
    controllers:
      main:
        strategy: Recreate
        containers:
          main:
            env:
              TRANSFORMERS_CACHE: /cache
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              pullPolicy: IfNotPresent
              tag: v2.2.1@sha256:590a76bba3d88ccf78b03cde0c0fb8788f7d76ae6caf90ad33a34b5b4cc35f11
    persistence:
      cache:
        enabled: true
        size: 10Gi
        # Optional: Set this to pvc to avoid downloading the ML models every start.
        type: persistentVolumeClaim
        accessMode: ReadWriteOnce
        # storageClass: your-class
        labels:
          velero.io/exclude-from-backup: "true"

cnpg-cluster-vectorchord:
  type: postgresql
  mode: recovery
  version:
    postgresql: "17"
  recovery:
    method: import
    import:
      type: microservice
      databases: ["immich"]
      source:
        host: immich-cnpg-cluster-tmp-rw
        username: immich
        database: immich
        passwordSecret:
          name: immich-cnpg-cluster-tmp-app
          key: password
        sslKeySecret:
          name: immich-cnpg-cluster-tmp-replication
          key: tls.key
        sslCertSecret:
          name: immich-cnpg-cluster-tmp-replication
          key: tls.crt
        sslRootCertSecret:
          name: immich-cnpg-cluster-tmp-ca
          key: ca.crt
  cluster:
    instances: 1
    imageCatalogRef:
      kind: ImageCatalog
      name: cloudnative-vectorchord
    storage:
      size: 8Gi
      storageClass: ""
    resources: {}
    primaryUpdateMethod: switchover
    primaryUpdateStrategy: unsupervised
    logLevel: "info"
    roles: []
    monitoring:
      enabled: true
      podMonitor:
        enabled: true
    postgresql:
      shared_preload_libraries:
        - "vchord.so"
    initdb:
      database: immich
      postInitSQL:
        - CREATE EXTENSION IF NOT EXISTS "cube";
        - CREATE EXTENSION IF NOT EXISTS "earthdistance";
        - CREATE EXTENSION IF NOT EXISTS "vector";
        - CREATE EXTENSION IF NOT EXISTS "vchord";
