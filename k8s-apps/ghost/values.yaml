ghost:
  extraDeploy: []
  image:
    registry: docker.io
    repository: bitnami/ghost
    tag: 5.110.1@sha256:532b8487a2ef64e125867fe00ce758600791fd30dc0f9f696b6172445f6a4b27
    digest: ""

  ## @section Ghost Configuration parameters
  ## Ghost settings based on environment variables
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/ghost#configuration

  ## @param ghostUsername Ghost user name
  ##
  ghostUsername: admin
  ## @param ghostPassword Ghost user password
  ## Defaults to a random 10-character alphanumeric string if not set
  ##
  ghostPassword: ""
  ## @param existingSecret Name of existing secret containing Ghost credentials
  ## NOTE: Must contain key `ghost-password`
  ## NOTE: When it's set, the `ghostPassword` parameter is ignored
  ##
  existingSecret: "ghost-credentials"
  ## @param ghostEmail Ghost user email
  ##
  ghostEmail: terence.chateigne+blog.terence.cloud@posteo.net
  ## @param ghostBlogTitle Ghost Blog title
  ##
  ghostBlogTitle: TÃ©rence's Blog
  ## @param ghostHost Ghost host to create application URLs
  ##
  ghostHost: "blog.terence.cloud"
  ## @param ghostPath URL sub path where to server the Ghost application
  ##
  ghostPath: /
  ## @param ghostEnableHttps Configure Ghost to build application URLs using https
  ##
  ghostEnableHttps: true
  ## SMTP mail delivery configuration
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/ghost/#smtp-configuration
  ## @param smtpHost SMTP server host
  ## @param smtpPort SMTP server port
  ## @param smtpUser SMTP username
  ## @param smtpPassword SMTP user password
  ## @param smtpService SMTP service
  ## @param smtpProtocol SMTP protocol (ssl or tls)
  ##
  smtpHost: ""
  smtpPort: ""
  smtpUser: ""
  smtpPassword: ""
  smtpService: ""
  smtpProtocol: ""
  ## @param smtpExistingSecret The name of an existing secret with SMTP credentials
  ## NOTE: Must contain key `smtp-password`
  ## NOTE: When it's set, the `smtpPassword` parameter is ignored
  ##
  smtpExistingSecret: ""
  ## @param allowEmptyPassword Allow the container to be started with blank passwords
  ##
  allowEmptyPassword: false
  ## @param ghostSkipInstall Skip performing the initial bootstrapping for Ghost
  ##
  ghostSkipInstall: false
  ## @param command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param extraEnvVars Array with extra environment variables to add to the Ghost container
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars
  ##
  extraEnvVarsCM: ""
  ## @param extraEnvVarsSecret Name of existing Secret containing extra env vars
  ##
  extraEnvVarsSecret: ""

  ## @section Ghost deployment parameters

  ## @param replicaCount Number of Ghost replicas to deploy
  ## NOTE: ReadWriteMany PVC(s) are required if replicaCount > 1
  ##
  replicaCount: 1
  ## @param updateStrategy.type Ghost deployment strategy type
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  ## NOTE: Set it to `Recreate` if you use a PV that cannot be mounted on multiple pods
  ## e.g:
  ## updateStrategy:
  ##  type: RollingUpdate
  ##  rollingUpdate:
  ##    maxSurge: 25%
  ##    maxUnavailable: 25%
  ##
  updateStrategy:
    type: Recreate
  ## @param priorityClassName Ghost pod priority class name
  ##
  priorityClassName: ""
  ## @param schedulerName Name of the k8s scheduler (other than default)
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param topologySpreadConstraints Topology Spread Constraints for pod assignment
  ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ## The value is evaluated as a template
  ##
  topologySpreadConstraints: []
  ## @param hostAliases Ghost pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param extraVolumes Optionally specify extra list of additional volumes for Ghost pods
  ##
  extraVolumes: []
  ## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for Ghost container(s)
  ##
  extraVolumeMounts: []
  ## @param sidecars Add additional sidecar containers to the Ghost pod
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param initContainers Add additional init containers to the Ghost pods
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    ports:
  ##      - name: portname
  ##        containerPort: 1234
  ##
  initContainers: []
  ## @param lifecycleHooks Add lifecycle hooks to the Ghost deployment
  ##
  lifecycleHooks: {}
  ## @param podLabels Extra labels for Ghost pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param podAnnotations Annotations for Ghost pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param podAntiAffinityPreset Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Node affinity preset
  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set
    ##
    key: ""
    ## @param nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set
    ## E.g.
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param affinity Affinity for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## NOTE: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}
  ## @param nodeSelector Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param tolerations Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## Ghost containers' resource requests and limits
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ## @param resources.limits The resources limits for the Ghost container
  ## @param resources.requests The requested resources for the Ghost container
  ##
  resources:
    limits: {}
    requests: {}
  ## Container ports
  ## @param containerPorts.http Ghost HTTP container port
  ## @param containerPorts.https Ghost HTTPS container port
  ##
  containerPorts:
    http: 2368
    https: 2368
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param podSecurityContext.enabled Enabled Ghost pods' Security Context
  ## @param podSecurityContext.fsGroup Set Ghost pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  ## Configure Container Security Context (only main container)
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param containerSecurityContext.enabled Enabled Ghost containers' Security Context
  ## @param containerSecurityContext.runAsUser Set Ghost container's Security Context runAsUser
  ## @param containerSecurityContext.runAsNonRoot Set Ghost container's Security Context runAsNonRoot
  ##
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
  ## Configure extra options for Ghost containers' liveness, readiness and startup probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param startupProbe.enabled Enable startupProbe
  ## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param startupProbe.periodSeconds Period seconds for startupProbe
  ## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  ## @param livenessProbe.enabled Enable livenessProbe
  ## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  ## @param readinessProbe.enabled Enable readinessProbe
  ## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 6
    successThreshold: 1
  ## @param customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param customReadinessProbe Custom readinessProbe that overrides the default one
  #
  customReadinessProbe: {}

  ## @section Traffic Exposure Parameters

  ## Ghost service parameters
  ##
  service:
    ## @param service.type Ghost service type
    ##
    type: ClusterIP
    ## @param service.ports.http Ghost service HTTP port
    ## @param service.ports.https Ghost service HTTPS port
    ##
    ports:
      http: 80
      https: 443
    ## Node ports to expose
    ## @param service.nodePorts.http Node port for HTTP
    ## @param service.nodePorts.https Node port for HTTPS
    ## NOTE: choose port between <30000-32767>
    ##
    nodePorts:
      http: ""
      https: ""
    ## @param service.clusterIP Ghost service Cluster IP
    ## e.g.:
    ## clusterIP: None
    ##
    clusterIP: ""
    ## @param service.loadBalancerIP Ghost service Load Balancer IP
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
    ##
    loadBalancerIP: ""
    ## @param service.loadBalancerSourceRanges Ghost service Load Balancer sources
    ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ## e.g:
    ## loadBalancerSourceRanges:
    ##   - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []
    ## @param service.externalTrafficPolicy Ghost service external traffic policy
    ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    ##
    externalTrafficPolicy: Cluster
    ## @param service.annotations Additional custom annotations for Ghost service
    ##
    annotations: {}
    ## @param service.extraPorts Extra port to expose on Ghost service
    ##
    extraPorts: []
    ## @param service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
    ## If "ClientIP", consecutive client requests will be directed to the same Pod
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    ##
    sessionAffinity: None
    ## @param service.sessionAffinityConfig Additional settings for the sessionAffinity
    ## sessionAffinityConfig:
    ##   clientIP:
    ##     timeoutSeconds: 300
    sessionAffinityConfig: {}
  ## Configure the ingress resource that allows you to access the Ghost installation
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ##
  ingress:
    ## @param ingress.enabled Enable ingress record generation for Ghost
    ##
    enabled: true
    ## @param ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
    ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion: ""
    ## @param ingress.hostname Default host for the ingress record
    ##
    hostname: blog.terence.cloud
    ## @param ingress.path Default path for the ingress record
    ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
    ##
    path: /
    ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      external-dns.alpha.kubernetes.io/target: home.terence.cloud
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
    tls: true
    ## DEPRECATED: Use ingress.annotations instead of ingress.certManager
    ## certManager: false
    ##

    ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
    ## e.g:
    ## extraHosts:
    ##   - name: ghost.local
    ##     path: /
    ##
    extraHosts: []
    ## @param ingress.extraPaths An array with additional arbitrary paths that may need to be added to the ingress under the main host
    ## e.g:
    ## extraPaths:
    ## - path: /*
    ##   backend:
    ##     serviceName: ssl-redirect
    ##     servicePort: use-annotation
    ##
    extraPaths: []
    ## @param ingress.extraTls TLS configuration for additional hostname(s) to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## e.g:
    ## extraTls:
    ## - hosts:
    ##     - ghost.local
    ##   secretName: ghost.local-tls
    ##
    extraTls: []
    ## @param ingress.secrets Custom TLS certificates as secrets
    ## NOTE: 'key' and 'certificate' are expected in PEM format
    ## NOTE: 'name' should line up with a 'secretName' set further up
    ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
    ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    ## e.g:
    ## secrets:
    ##   - name: ghost.local-tls
    ##     key: |-
    ##       -----BEGIN RSA PRIVATE KEY-----
    ##       ...
    ##       -----END RSA PRIVATE KEY-----
    ##     certificate: |-
    ##       -----BEGIN CERTIFICATE-----
    ##       ...
    ##       -----END CERTIFICATE-----
    ##
    secrets: []
    ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: "nginx"
    ## @param ingress.extraRules Additional rules to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## e.g:
    ## extraRules:
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http
    ##
    extraRules: []
  ## @section Persistence Parameters

  ## Persistence Parameters
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param persistence.enabled Enable persistence using Persistent Volume Claims
    ##
    enabled: true
    ## @param persistence.storageClass Persistent Volume storage class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
    ##
    storageClass: ""
    ## @param persistence.annotations Additional custom annotations for the PVC
    ##
    annotations: {}
    ## @param persistence.accessModes [array] Persistent Volume access modes
    ##
    accessModes:
      - ReadWriteOnce
    ## @param persistence.size Persistent Volume size
    ##
    size: 8Gi
    ## @param persistence.existingClaim The name of an existing PVC to use for persistence
    ##
    existingClaim: ""
    ## @param persistence.subPath The name of a volume's sub path to mount for persistence
    ##
    subPath: ""
  ## 'volumePermissions' init container parameters
  ## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
  ##   based on the podSecurityContext/containerSecurityContext parameters
  ##
  volumePermissions:
    ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
    ##
    enabled: true
    ## Bitnami Shell image
    ## ref: https://hub.docker.com/r/bitnami/bitnami-shell/tags/
    ## @param volumePermissions.image.registry Bitnami Shell image registry
    ## @param volumePermissions.image.repository Bitnami Shell image repository
    ## @param volumePermissions.image.tag Bitnami Shell image tag (immutable tags are recommended)
    ## @param volumePermissions.image.digest Bitnami Shell image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param volumePermissions.image.pullPolicy Bitnami Shell image pull policy
    ## @param volumePermissions.image.pullSecrets Bitnami Shell image pull secrets
    ##
    image:
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r136@sha256:201f48da3d894ce5aaf22e042683319a0e7095fccc8ef069ef792eb06426b6b9
      digest: ""
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## Init container's resource requests and limits
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    ## @param volumePermissions.resources.limits The resources limits for the init container
    ## @param volumePermissions.resources.requests The requested resources for the init container
    ##
    resources:
      limits: {}
      requests: {}
    ## Init container Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param volumePermissions.securityContext.runAsUser Set init container's Security Context runAsUser
    ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
    ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
    ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
    ##
    securityContext:
      runAsUser: 0

  ## @section Database Parameters

  ## MySQL chart configuration
  ## ref: https://github.com/bitnami/charts/blob/main/bitnami/mysql/values.yaml
  ##
  mysql:
    ## @param mysql.enabled Deploy a MySQL server to satisfy the applications database requirements
    ## To use an external database set this to false and configure the `externalDatabase.*` parameters
    ##
    enabled: true
    ## @param mysql.architecture MySQL architecture. Allowed values: `standalone` or `replication`
    ##
    architecture: standalone
    ## MySQL Authentication parameters
    ## @param mysql.auth.rootPassword MySQL root password
    ## @param mysql.auth.database MySQL custom database
    ## @param mysql.auth.username MySQL custom user name
    ## @param mysql.auth.password MySQL custom user password
    ## @param mysql.auth.existingSecret Existing secret with MySQL credentials
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
    ##      https://github.com/bitnami/containers/tree/main/bitnami/mysql/#creating-a-database-on-first-run
    ##      https://github.com/bitnami/containers/tree/main/bitnami/mysql/#creating-a-database-user-on-first-run
    auth:
      rootPassword: ""
      database: bitnami_ghost
      username: bn_ghost
      password: ""
      existingSecret: "ghost-credentials"
    ## MySQL Primary configuration
    ##
    primary:
      ## MySQL Primary Persistence parameters
      ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
      ## @param mysql.primary.persistence.enabled Enable persistence on MySQL using PVC(s)
      ## @param mysql.primary.persistence.storageClass Persistent Volume storage class
      ## @param mysql.primary.persistence.accessModes [array] Persistent Volume access modes
      ## @param mysql.primary.persistence.size Persistent Volume size
      ##
      persistence:
        enabled: true
        storageClass: ""
        accessModes:
          - ReadWriteOnce
        size: 8Gi
  ## External Database Configuration
  ## All of these values are only used if `mysql.enabled=false`
  ##
  externalDatabase:
    ## @param externalDatabase.host External Database server host
    ##
    host: localhost
    ## @param externalDatabase.port External Database server port
    ##
    port: 3306
    ## @param externalDatabase.user External Database username
    ##
    user: bn_ghost
    ## @param externalDatabase.password External Database user password
    ##
    password: ""
    ## @param externalDatabase.database External Database database name
    ##
    database: bitnami_ghost
    ## @param externalDatabase.existingSecret The name of an existing secret with database credentials
    ## NOTE: Must contain key `mysql-password`
    ## NOTE: When it's set, the `externalDatabase.password` parameter is ignored
    ##
    existingSecret: ""
    ## @param externalDatabase.ssl External Database ssl
    ##
    ssl: false
    ## @param externalDatabase.sslCaFile External Database ssl CA filepath
    ##
    sslCaFile: ""

  ## @section NetworkPolicy parameters

  ## Add networkpolicies
  ##
  networkPolicy:
    ## @param networkPolicy.enabled Enable network policies
    ## If ingress.enabled or metrics.enabled are true, configure networkPolicy.ingress and networkPolicy.metrics selectors respectively to allow communication
    ##
    enabled: false
    ## @param networkPolicy.ingress.enabled Enable network policy for Ingress Proxies
    ## @param networkPolicy.ingress.namespaceSelector Ingress Proxy namespace selector labels. These labels will be used to identify the Ingress Proxy's namespace.
    ## @param networkPolicy.ingress.podSelector Ingress Proxy pods selector labels. These labels will be used to identify the Ingress Proxy pods.
    ##
    ingress:
      enabled: false
      ## e.g:
      ## podSelector:
      ##   label: ingress
      ##
      podSelector: {}
      ## e.g:
      ## namespaceSelector:
      ##   label: ingress
      ##
      namespaceSelector: {}
    ## @param networkPolicy.ingressRules.backendOnlyAccessibleByFrontend Enable ingress rule that makes the backend (mysql) only accessible by Ghost's pods.
    ## @param networkPolicy.ingressRules.customBackendSelector Backend selector labels. These labels will be used to identify the backend pods.
    ## @param networkPolicy.ingressRules.accessOnlyFrom.enabled Enable ingress rule that makes Ghost only accessible from a particular origin
    ## @param networkPolicy.ingressRules.accessOnlyFrom.namespaceSelector Namespace selector label that is allowed to access Ghost. This label will be used to identified the allowed namespace(s).
    ## @param networkPolicy.ingressRules.accessOnlyFrom.podSelector Pods selector label that is allowed to access Ghost. This label will be used to identified the allowed pod(s).
    ## @param networkPolicy.ingressRules.customRules Custom network policy ingress rule
    ##
    ingressRules:
      ## mysql backend only can be accessed from Ghost
      ##
      backendOnlyAccessibleByFrontend: false
      customBackendSelector: {}
      ## Allow only from the indicated:
      ##
      accessOnlyFrom:
        enabled: false
        ## e.g:
        ## namespaceSelector:
        ##   label: ingress
        ##
        namespaceSelector: {}
        ## e.g:
        ## podSelector:
        ##   label: access
        ##
        podSelector: {}
      ## custom ingress rules
      ## e.g:
      ## customRules:
      ##   - from:
      ##       - namespaceSelector:
      ##           matchLabels:
      ##             label: example
      ##
      customRules: {}
    ## @param networkPolicy.egressRules.denyConnectionsToExternal Enable egress rule that denies outgoing traffic outside the cluster, except for DNS (port 53).
    ## @param networkPolicy.egressRules.customRules Custom network policy rule
    ##
    egressRules:
      ## Deny connections to external. This is not compatible with an external database.
      ##
      denyConnectionsToExternal: false
      ## Additional custom egress rules
      ## e.g:
      ## customRules:
      ##   - to:
      ##       - namespaceSelector:
      ##           matchLabels:
      ##             label: example
      ##
      customRules: {}

  ## Pods Service Account
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
  ## @param serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.
  ## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
  ## @param serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.
  ##
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
    annotations: {}
